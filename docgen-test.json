{"meta":{"generator":"0.8.0","format":19,"date":1553385211541},"custom":{"memes":{"name":"Memes","files":{"one":{"name":"One","type":"md","content":"# One","path":"memes/one.md"},"two":{"name":"Two","type":"md","content":"# Two","path":"memes/two.md"},"three":{"name":"Three","type":"md","content":"# Three","path":"memes/three.md"}}}},"classes":[{"name":"Provider","construct":{"name":"Provider","description":"A provider for key-value storage.\nMust be implemented."},"props":[{"name":"items","description":"Cached entries.","type":[[["Collection","<"],["string",", "],["Object",">"]]],"meta":{"line":14,"file":"Provider.js","path":"src/providers"}}],"methods":[{"name":"init","description":"Initializes the provider.","abstract":true,"returns":[[["any"]]],"meta":{"line":22,"file":"Provider.js","path":"src/providers"}},{"name":"get","description":"Gets a value.","abstract":true,"params":[{"name":"id","description":"ID of entry.","type":[[["string"]]]},{"name":"key","description":"The key to get.","type":[[["string"]]]},{"name":"defaultValue","description":"Default value if not found or null.","optional":true,"type":[[["any"]]]}],"returns":[[["any"]]],"meta":{"line":34,"file":"Provider.js","path":"src/providers"}},{"name":"set","description":"Sets a value.","abstract":true,"params":[{"name":"id","description":"ID of entry.","type":[[["string"]]]},{"name":"key","description":"The key to set.","type":[[["string"]]]},{"name":"value","description":"The value.","type":[[["any"]]]}],"returns":[[["any"]]],"meta":{"line":46,"file":"Provider.js","path":"src/providers"}},{"name":"delete","description":"Deletes a value.","abstract":true,"params":[{"name":"id","description":"ID of entry.","type":[[["string"]]]},{"name":"key","description":"The key to delete.","type":[[["string"]]]}],"returns":[[["any"]]],"meta":{"line":57,"file":"Provider.js","path":"src/providers"}},{"name":"clear","description":"Clears an entry.","abstract":true,"params":[{"name":"id","description":"ID of entry.","type":[[["string"]]]}],"returns":[[["any"]]],"meta":{"line":67,"file":"Provider.js","path":"src/providers"}}],"meta":{"line":9,"file":"Provider.js","path":"src/providers"}},{"name":"SequelizeProvider","extends":["Provider"],"construct":{"name":"SequelizeProvider","description":"Provider using the `sequelize` library.","params":[{"name":"table","description":"A Sequelize model.","type":[[["Model"]]]},{"name":"options","description":"Options to use.","optional":true,"default":"{}","type":[[["ProviderOptions"]]]}]},"props":[{"name":"table","description":"Sequelize model.","type":[[["Model"]]],"meta":{"line":17,"file":"SequelizeProvider.js","path":"src/providers"}},{"name":"idColumn","description":"Column for ID.","type":[[["string"]]],"meta":{"line":23,"file":"SequelizeProvider.js","path":"src/providers"}},{"name":"dataColumn","description":"Column for JSON data.","nullable":true,"type":[[["string"]]],"meta":{"line":29,"file":"SequelizeProvider.js","path":"src/providers"}},{"name":"items","description":"Cached entries.","type":[[["Collection","<"],["string",", "],["Object",">"]]],"meta":{"line":14,"file":"Provider.js","path":"src/providers"}}],"methods":[{"name":"init","description":"Initializes the provider.","async":true,"returns":[[["Bluebird","<"],["void",">"]]],"meta":{"line":36,"file":"SequelizeProvider.js","path":"src/providers"}},{"name":"get","description":"Gets a value.","params":[{"name":"id","description":"ID of entry.","type":[[["string"]]]},{"name":"key","description":"The key to get.","type":[[["string"]]]},{"name":"defaultValue","description":"Default value if not found or null.","optional":true,"type":[[["any"]]]}],"returns":[[["any"]]],"meta":{"line":50,"file":"SequelizeProvider.js","path":"src/providers"}},{"name":"set","description":"Sets a value.","params":[{"name":"id","description":"ID of entry.","type":[[["string"]]]},{"name":"key","description":"The key to set.","type":[[["string"]]]},{"name":"value","description":"The value.","type":[[["any"]]]}],"returns":[[["Bluebird","<"],["boolean",">"]]],"meta":{"line":66,"file":"SequelizeProvider.js","path":"src/providers"}},{"name":"delete","description":"Deletes a value.","params":[{"name":"id","description":"ID of entry.","type":[[["string"]]]},{"name":"key","description":"The key to delete.","type":[[["string"]]]}],"returns":[[["Bluebird","<"],["boolean",">"]]],"meta":{"line":90,"file":"SequelizeProvider.js","path":"src/providers"}},{"name":"clear","description":"Clears an entry.","params":[{"name":"id","description":"ID of entry.","type":[[["string"]]]}],"returns":[[["Bluebird","<"],["void",">"]]],"meta":{"line":112,"file":"SequelizeProvider.js","path":"src/providers"}}],"meta":{"line":4,"file":"SequelizeProvider.js","path":"src/providers"}},{"name":"SQLiteProvider","extends":["Provider"],"construct":{"name":"SQLiteProvider","description":"Provider using the `sqlite` library.","params":[{"name":"db","description":"SQLite database from `sqlite`.","type":[[["Database"]],[["Promise","<"],["Database",">"]]]},{"name":"tableName","description":"Name of table to handle.","type":[[["string"]]]},{"name":"options","description":"Options to use.","optional":true,"default":"{}","type":[[["ProviderOptions"]]]}]},"props":[{"name":"db","description":"SQLite database.","type":[[["Database"]]],"meta":{"line":18,"file":"SQLiteProvider.js","path":"src/providers"}},{"name":"tableName","description":"Name of the table.","type":[[["string"]]],"meta":{"line":24,"file":"SQLiteProvider.js","path":"src/providers"}},{"name":"idColumn","description":"Column for ID.","type":[[["string"]]],"meta":{"line":30,"file":"SQLiteProvider.js","path":"src/providers"}},{"name":"dataColumn","description":"Column for JSON data.","nullable":true,"type":[[["string"]]],"meta":{"line":36,"file":"SQLiteProvider.js","path":"src/providers"}},{"name":"items","description":"Cached entries.","type":[[["Collection","<"],["string",", "],["Object",">"]]],"meta":{"line":14,"file":"Provider.js","path":"src/providers"}}],"methods":[{"name":"init","description":"Initializes the provider.","async":true,"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":43,"file":"SQLiteProvider.js","path":"src/providers"}},{"name":"get","description":"Gets a value.","params":[{"name":"id","description":"ID of entry.","type":[[["string"]]]},{"name":"key","description":"The key to get.","type":[[["string"]]]},{"name":"defaultValue","description":"Default value if not found or null.","optional":true,"type":[[["any"]]]}],"returns":[[["any"]]],"meta":{"line":60,"file":"SQLiteProvider.js","path":"src/providers"}},{"name":"set","description":"Sets a value.","params":[{"name":"id","description":"ID of entry.","type":[[["string"]]]},{"name":"key","description":"The key to set.","type":[[["string"]]]},{"name":"value","description":"The value.","type":[[["any"]]]}],"returns":[[["Promise","<"],["Statement",">"]]],"meta":{"line":76,"file":"SQLiteProvider.js","path":"src/providers"}},{"name":"delete","description":"Deletes a value.","params":[{"name":"id","description":"ID of entry.","type":[[["string"]]]},{"name":"key","description":"The key to delete.","type":[[["string"]]]}],"returns":[[["Promise","<"],["Statement",">"]]],"meta":{"line":106,"file":"SQLiteProvider.js","path":"src/providers"}},{"name":"clear","description":"Clears an entry.","params":[{"name":"id","description":"ID of entry.","type":[[["string"]]]}],"returns":[[["Promise","<"],["Statement",">"]]],"meta":{"line":128,"file":"SQLiteProvider.js","path":"src/providers"}}],"meta":{"line":4,"file":"SQLiteProvider.js","path":"src/providers"}},{"name":"AkairoClient","construct":{"name":"AkairoClient","description":"The Akairo framework client.\nCreates the handlers and sets them up.","params":[{"name":"options","description":"Options for the client.","optional":true,"default":"{}","type":[[["AkairoOptions"]]]},{"name":"clientOptions","description":"Options for Discord JS client.\nIf not specified, the previous options parameter is used instead.","optional":true,"type":[[["ClientOptions"]]]}]},"props":[{"name":"ownerID","description":"The ID of the owner(s).","type":[[["Snowflake"]],[["Array","<"],["Snowflake",">"]]],"meta":{"line":21,"file":"AkairoClient.js","path":"src/struct"}},{"name":"util","description":"Utility methods.","type":[[["ClientUtil"]]],"meta":{"line":27,"file":"AkairoClient.js","path":"src/struct"}}],"methods":[{"name":"isOwner","description":"Checks if a user is the owner of this bot.","params":[{"name":"user","description":"User to check.","type":[[["UserResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":35,"file":"AkairoClient.js","path":"src/struct"}}],"meta":{"line":12,"file":"AkairoClient.js","path":"src/struct"}},{"name":"AkairoHandler","extends":["EventEmitter"],"construct":{"name":"AkairoHandler","description":"Handles module loading.","params":[{"name":"client","description":"The Akairo client.","type":[[["AkairoClient"]]]},{"name":"options","description":"Options for module loading and handling.","type":[[["AkairoHandlerOptions"]]]}]},"props":[{"name":"client","description":"The Akairo client.","type":[[["AkairoClient"]]],"meta":{"line":30,"file":"AkairoHandler.js","path":"src/struct"}},{"name":"directory","description":"The main directory to modules.","type":[[["string"]]],"meta":{"line":36,"file":"AkairoHandler.js","path":"src/struct"}},{"name":"classToHandle","description":"Class to handle.","type":[[["function"]]],"meta":{"line":42,"file":"AkairoHandler.js","path":"src/struct"}},{"name":"extensions","description":"File extensions to load.","type":[[["Set","<"],["string",">"]]],"meta":{"line":48,"file":"AkairoHandler.js","path":"src/struct"}},{"name":"automateCategories","description":"Whether or not to automate category names.","type":[[["boolean"]]],"meta":{"line":54,"file":"AkairoHandler.js","path":"src/struct"}},{"name":"loadFilter","description":"Function that filters files when loading.","type":[[["LoadPredicate"]]],"meta":{"line":60,"file":"AkairoHandler.js","path":"src/struct"}},{"name":"modules","description":"Modules loaded, mapped by ID to AkairoModule.","type":[[["Collection","<"],["string",", "],["AkairoModule",">"]]],"meta":{"line":66,"file":"AkairoHandler.js","path":"src/struct"}},{"name":"categories","description":"Categories, mapped by ID to Category.","type":[[["Collection","<"],["string",", "],["Category",">"]]],"meta":{"line":72,"file":"AkairoHandler.js","path":"src/struct"}}],"methods":[{"name":"register","description":"Registers a module.","params":[{"name":"mod","description":"Module to use.","type":[[["AkairoModule"]]]},{"name":"filepath","description":"Filepath of module.","optional":true,"type":[[["string"]]]}],"returns":[[["void"]]],"meta":{"line":81,"file":"AkairoHandler.js","path":"src/struct"}},{"name":"deregister","description":"Deregisters a module.","params":[{"name":"mod","description":"Module to use.","type":[[["AkairoModule"]]]}],"returns":[[["void"]]],"meta":{"line":106,"file":"AkairoHandler.js","path":"src/struct"}},{"name":"load","description":"Loads a module, can be a module class or a filepath.","params":[{"name":"thing","description":"Module class or path to module.","type":[[["string"]],[["function"]]]},{"name":"isReload","description":"Whether this is a reload or not.","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["AkairoModule"]]],"meta":{"line":118,"file":"AkairoHandler.js","path":"src/struct"}},{"name":"loadAll","description":"Reads all modules from a directory and loads them.","params":[{"name":"directory","description":"Directory to load from.\nDefaults to the directory passed in the constructor.","optional":true,"type":[[["string"]]]},{"name":"filter","description":"Filter for files, where true means it should be loaded.\nDefaults to the filter passed in the constructor.","optional":true,"type":[[["LoadPredicate"]]]}],"returns":[[["AkairoHandler"]]],"meta":{"line":152,"file":"AkairoHandler.js","path":"src/struct"}},{"name":"remove","description":"Removes a module.","params":[{"name":"id","description":"ID of the module.","type":[[["string"]]]}],"returns":[[["AkairoModule"]]],"meta":{"line":167,"file":"AkairoHandler.js","path":"src/struct"}},{"name":"removeAll","description":"Removes all modules.","returns":[[["AkairoHandler"]]],"meta":{"line":181,"file":"AkairoHandler.js","path":"src/struct"}},{"name":"reload","description":"Reloads a module.","params":[{"name":"id","description":"ID of the module.","type":[[["string"]]]}],"returns":[[["AkairoModule"]]],"meta":{"line":194,"file":"AkairoHandler.js","path":"src/struct"}},{"name":"reloadAll","description":"Reloads all modules.","returns":[[["AkairoHandler"]]],"meta":{"line":210,"file":"AkairoHandler.js","path":"src/struct"}},{"name":"findCategory","description":"Finds a category by name.","params":[{"name":"name","description":"Name to find with.","type":[[["string"]]]}],"returns":[[["Category"]]],"meta":{"line":223,"file":"AkairoHandler.js","path":"src/struct"}},{"name":"readdirRecursive","description":"Reads files recursively from a directory.","scope":"static","params":[{"name":"directory","description":"Directory to read.","type":[[["string"]]]}],"returns":[[["Array","<"],["string",">"]]],"meta":{"line":234,"file":"AkairoHandler.js","path":"src/struct"}}],"events":[{"name":"load","description":"Emitted when a module is loaded.","params":[{"name":"mod","description":"Module loaded.","type":[[["AkairoModule"]]]},{"name":"isReload","description":"Whether or not this was a reload.","type":[[["boolean"]]]}],"meta":{"line":257,"file":"AkairoHandler.js","path":"src/struct"}},{"name":"remove","description":"Emitted when a module is removed.","params":[{"name":"mod","description":"Module removed.","type":[[["AkairoModule"]]]}],"meta":{"line":264,"file":"AkairoHandler.js","path":"src/struct"}}],"meta":{"line":11,"file":"AkairoHandler.js","path":"src/struct"}},{"name":"AkairoModule","construct":{"name":"AkairoModule","description":"Creates a new module.","params":[{"name":"id","description":"ID of module.","type":[[["string"]]]},{"name":"options","description":"Options.","optional":true,"default":"{}","type":[[["AkairoModuleOptions"]]]}]},"props":[{"name":"id","description":"ID of the module.","type":[[["string"]]],"meta":{"line":12,"file":"AkairoModule.js","path":"src/struct"}},{"name":"categoryID","description":"ID of the category this belongs to.","type":[[["string"]]],"meta":{"line":18,"file":"AkairoModule.js","path":"src/struct"}},{"name":"category","description":"Category this belongs to.","type":[[["Category"]]],"meta":{"line":24,"file":"AkairoModule.js","path":"src/struct"}},{"name":"filepath","description":"The filepath.","type":[[["string"]]],"meta":{"line":30,"file":"AkairoModule.js","path":"src/struct"}},{"name":"client","description":"The Akairo client.","type":[[["AkairoClient"]]],"meta":{"line":36,"file":"AkairoModule.js","path":"src/struct"}},{"name":"handler","description":"The handler.","type":[[["AkairoHandler"]]],"meta":{"line":42,"file":"AkairoModule.js","path":"src/struct"}}],"methods":[{"name":"reload","description":"Reloads the module.","returns":[[["AkairoModule"]]],"meta":{"line":49,"file":"AkairoModule.js","path":"src/struct"}},{"name":"remove","description":"Removes the module.","returns":[[["AkairoModule"]]],"meta":{"line":57,"file":"AkairoModule.js","path":"src/struct"}},{"name":"toString","description":"Returns the ID.","returns":[[["string"]]],"meta":{"line":65,"file":"AkairoModule.js","path":"src/struct"}}],"meta":{"line":7,"file":"AkairoModule.js","path":"src/struct"}},{"name":"ClientUtil","construct":{"name":"ClientUtil","description":"Client utilities to help with common tasks.","params":[{"name":"client","description":"The client.","type":[[["AkairoClient"]]]}]},"props":[{"name":"client","description":"The Akairo client.","type":[[["AkairoClient"]]],"meta":{"line":13,"file":"ClientUtil.js","path":"src/struct"}}],"methods":[{"name":"resolveUser","description":"Resolves a user from a string, such as an ID, a name, or a mention.","params":[{"name":"text","description":"Text to resolve.","type":[[["string"]]]},{"name":"users","description":"Collection of users to find in.","type":[[["Collection","<"],["Snowflake",", "],["User",">"]]]},{"name":"caseSensitive","description":"Makes finding by name case sensitive.","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"wholeWord","description":"Makes finding by name match full word only.","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["User"]]],"meta":{"line":24,"file":"ClientUtil.js","path":"src/struct"}},{"name":"resolveUsers","description":"Resolves multiple users from a string, such as an ID, a name, or a mention.","params":[{"name":"text","description":"Text to resolve.","type":[[["string"]]]},{"name":"users","description":"Collection of users to find in.","type":[[["Collection","<"],["Snowflake",", "],["User",">"]]]},{"name":"caseSensitive","description":"Makes finding by name case sensitive.","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"wholeWord","description":"Makes finding by name match full word only.","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["Collection","<"],["Snowflake",", "],["User",">"]]],"meta":{"line":36,"file":"ClientUtil.js","path":"src/struct"}},{"name":"checkUser","description":"Checks if a string could be referring to a user.","params":[{"name":"text","description":"Text to check.","type":[[["string"]]]},{"name":"user","description":"User to check.","type":[[["User"]]]},{"name":"caseSensitive","description":"Makes checking by name case sensitive.","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"wholeWord","description":"Makes checking by name match full word only.","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["boolean"]]],"meta":{"line":48,"file":"ClientUtil.js","path":"src/struct"}},{"name":"resolveMember","description":"Resolves a member from a string, such as an ID, a name, or a mention.","params":[{"name":"text","description":"Text to resolve.","type":[[["string"]]]},{"name":"members","description":"Collection of members to find in.","type":[[["Collection","<"],["Snowflake",", "],["GuildMember",">"]]]},{"name":"caseSensitive","description":"Makes finding by name case sensitive.","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"wholeWord","description":"Makes finding by name match full word only.","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["GuildMember"]]],"meta":{"line":77,"file":"ClientUtil.js","path":"src/struct"}},{"name":"resolveMembers","description":"Resolves multiple members from a string, such as an ID, a name, or a mention.","params":[{"name":"text","description":"Text to resolve.","type":[[["string"]]]},{"name":"members","description":"Collection of members to find in.","type":[[["Collection","<"],["Snowflake",", "],["GuildMember",">"]]]},{"name":"caseSensitive","description":"Makes finding by name case sensitive.","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"wholeWord","description":"Makes finding by name match full word only.","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["Collection","<"],["Snowflake",", "],["GuildMember",">"]]],"meta":{"line":89,"file":"ClientUtil.js","path":"src/struct"}},{"name":"checkMember","description":"Checks if a string could be referring to a member.","params":[{"name":"text","description":"Text to check.","type":[[["string"]]]},{"name":"member","description":"Member to check.","type":[[["GuildMember"]]]},{"name":"caseSensitive","description":"Makes checking by name case sensitive.","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"wholeWord","description":"Makes checking by name match full word only.","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["boolean"]]],"meta":{"line":101,"file":"ClientUtil.js","path":"src/struct"}},{"name":"resolveChannel","description":"Resolves a channel from a string, such as an ID, a name, or a mention.","params":[{"name":"text","description":"Text to resolve.","type":[[["string"]]]},{"name":"channels","description":"Collection of channels to find in.","type":[[["Collection","<"],["Snowflake",", "],["Channel",">"]]]},{"name":"caseSensitive","description":"Makes finding by name case sensitive.","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"wholeWord","description":"Makes finding by name match full word only.","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["Channel"]]],"meta":{"line":133,"file":"ClientUtil.js","path":"src/struct"}},{"name":"resolveChannels","description":"Resolves multiple channels from a string, such as an ID, a name, or a mention.","params":[{"name":"text","description":"Text to resolve.","type":[[["string"]]]},{"name":"channels","description":"Collection of channels to find in.","type":[[["Collection","<"],["Snowflake",", "],["Channel",">"]]]},{"name":"caseSensitive","description":"Makes finding by name case sensitive.","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"wholeWord","description":"Makes finding by name match full word only.","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["Collection","<"],["Snowflake",", "],["Channel",">"]]],"meta":{"line":145,"file":"ClientUtil.js","path":"src/struct"}},{"name":"checkChannel","description":"Checks if a string could be referring to a channel.","params":[{"name":"text","description":"Text to check.","type":[[["string"]]]},{"name":"channel","description":"Channel to check.","type":[[["Channel"]]]},{"name":"caseSensitive","description":"Makes checking by name case sensitive.","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"wholeWord","description":"Makes checking by name match full word only.","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["boolean"]]],"meta":{"line":157,"file":"ClientUtil.js","path":"src/struct"}},{"name":"resolveRole","description":"Resolves a role from a string, such as an ID, a name, or a mention.","params":[{"name":"text","description":"Text to resolve.","type":[[["string"]]]},{"name":"roles","description":"Collection of roles to find in.","type":[[["Collection","<"],["Snowflake",", "],["Role",">"]]]},{"name":"caseSensitive","description":"Makes finding by name case sensitive.","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"wholeWord","description":"Makes finding by name match full word only.","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["Role"]]],"meta":{"line":185,"file":"ClientUtil.js","path":"src/struct"}},{"name":"resolveRoles","description":"Resolves multiple roles from a string, such as an ID, a name, or a mention.","params":[{"name":"text","description":"Text to resolve.","type":[[["string"]]]},{"name":"roles","description":"Collection of roles to find in.","type":[[["Collection","<"],["Snowflake",", "],["Role",">"]]]},{"name":"caseSensitive","description":"Makes finding by name case sensitive.","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"wholeWord","description":"Makes finding by name match full word only.","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["Collection","<"],["Snowflake",", "],["Role",">"]]],"meta":{"line":197,"file":"ClientUtil.js","path":"src/struct"}},{"name":"checkRole","description":"Checks if a string could be referring to a role.","params":[{"name":"text","description":"Text to check.","type":[[["string"]]]},{"name":"role","description":"Role to check.","type":[[["Role"]]]},{"name":"caseSensitive","description":"Makes checking by name case sensitive.","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"wholeWord","description":"Makes checking by name match full word only.","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["boolean"]]],"meta":{"line":209,"file":"ClientUtil.js","path":"src/struct"}},{"name":"resolveEmoji","description":"Resolves a custom emoji from a string, such as a name or a mention.","params":[{"name":"text","description":"Text to resolve.","type":[[["string"]]]},{"name":"emojis","description":"Collection of emojis to find in.","type":[[["Collection","<"],["Snowflake",", "],["Emoji",">"]]]},{"name":"caseSensitive","description":"Makes finding by name case sensitive.","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"wholeWord","description":"Makes finding by name match full word only.","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["Emoji"]]],"meta":{"line":237,"file":"ClientUtil.js","path":"src/struct"}},{"name":"resolveEmojis","description":"Resolves multiple custom emojis from a string, such as a name or a mention.","params":[{"name":"text","description":"Text to resolve.","type":[[["string"]]]},{"name":"emojis","description":"Collection of emojis to find in.","type":[[["Collection","<"],["Snowflake",", "],["Emoji",">"]]]},{"name":"caseSensitive","description":"Makes finding by name case sensitive.","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"wholeWord","description":"Makes finding by name match full word only.","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["Collection","<"],["Snowflake",", "],["Emoji",">"]]],"meta":{"line":249,"file":"ClientUtil.js","path":"src/struct"}},{"name":"checkEmoji","description":"Checks if a string could be referring to a emoji.","params":[{"name":"text","description":"Text to check.","type":[[["string"]]]},{"name":"emoji","description":"Emoji to check.","type":[[["Emoji"]]]},{"name":"caseSensitive","description":"Makes checking by name case sensitive.","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"wholeWord","description":"Makes checking by name match full word only.","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["boolean"]]],"meta":{"line":261,"file":"ClientUtil.js","path":"src/struct"}},{"name":"resolveGuild","description":"Resolves a guild from a string, such as an ID or a name.","params":[{"name":"text","description":"Text to resolve.","type":[[["string"]]]},{"name":"guilds","description":"Collection of guilds to find in.","type":[[["Collection","<"],["Snowflake",", "],["Guild",">"]]]},{"name":"caseSensitive","description":"Makes finding by name case sensitive.","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"wholeWord","description":"Makes finding by name match full word only.","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["Guild"]]],"meta":{"line":289,"file":"ClientUtil.js","path":"src/struct"}},{"name":"resolveGuilds","description":"Resolves multiple guilds from a string, such as an ID or a name.","params":[{"name":"text","description":"Text to resolve.","type":[[["string"]]]},{"name":"guilds","description":"Collection of guilds to find in.","type":[[["Collection","<"],["Snowflake",", "],["Guild",">"]]]},{"name":"caseSensitive","description":"Makes finding by name case sensitive.","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"wholeWord","description":"Makes finding by name match full word only.","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["Collection","<"],["Snowflake",", "],["Guild",">"]]],"meta":{"line":301,"file":"ClientUtil.js","path":"src/struct"}},{"name":"checkGuild","description":"Checks if a string could be referring to a guild.","params":[{"name":"text","description":"Text to check.","type":[[["string"]]]},{"name":"guild","description":"Guild to check.","type":[[["Guild"]]]},{"name":"caseSensitive","description":"Makes checking by name case sensitive.","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"wholeWord","description":"Makes checking by name match full word only.","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["boolean"]]],"meta":{"line":313,"file":"ClientUtil.js","path":"src/struct"}},{"name":"permissionNames","description":"Array of permission names.","returns":[[["Array","<"],["string",">"]]],"meta":{"line":327,"file":"ClientUtil.js","path":"src/struct"}},{"name":"resolvePermissionNumber","description":"Resolves a permission number and returns an array of permission names.","params":[{"name":"number","description":"The permissions number.","type":[[["number"]]]}],"returns":[[["Array","<"],["string",">"]]],"meta":{"line":336,"file":"ClientUtil.js","path":"src/struct"}},{"name":"compareStreaming","description":"Compares two member objects presences and checks if they stopped or started a stream or not.\nReturns `0`, `1`, or `2` for no change, stopped, or started.","params":[{"name":"oldMember","description":"The old member.","type":[[["GuildMember"]]]},{"name":"newMember","description":"The new member.","type":[[["GuildMember"]]]}],"returns":[[["number"]]],"meta":{"line":353,"file":"ClientUtil.js","path":"src/struct"}},{"name":"fetchMember","description":"Combination of `<Client>.fetchUser()` and `<Guild>.fetchMember()`.","params":[{"name":"guild","description":"Guild to fetch in.","type":[[["Guild"]]]},{"name":"id","description":"ID of the user.","type":[[["string"]]]},{"name":"cache","description":"Whether or not to add to cache.","type":[[["boolean"]]]}],"async":true,"returns":[[["Promise","<"],["GuildMember",">"]]],"meta":{"line":369,"file":"ClientUtil.js","path":"src/struct"}},{"name":"embed","description":"Makes a MessageEmbed.","params":[{"name":"data","description":"Embed data.","optional":true,"type":[[["Object"]]]}],"returns":[[["MessageEmbed"]]],"meta":{"line":379,"file":"ClientUtil.js","path":"src/struct"}},{"name":"attachment","description":"Makes a MessageAttachment.","params":[{"name":"file","description":"The file.","type":[[["BufferResolvable"]],[["Stream"]]]},{"name":"name","description":"The filename.","optional":true,"type":[[["string"]]]}],"returns":[[["MessageAttachment"]]],"meta":{"line":389,"file":"ClientUtil.js","path":"src/struct"}},{"name":"collection","description":"Makes a Collection.","params":[{"name":"iterable","description":"Entries to fill with.","optional":true,"type":[[["Iterable"]]]}],"returns":[[["Collection"]]],"meta":{"line":398,"file":"ClientUtil.js","path":"src/struct"}}],"meta":{"line":8,"file":"ClientUtil.js","path":"src/struct"}},{"name":"Argument","construct":{"name":"Argument","description":"An argument for a command.","params":[{"name":"command","description":"Command of the argument.","type":[[["Command"]]]},{"name":"options","description":"Options for the argument.","type":[[["ArgumentOptions"]]]}]},"props":[{"name":"command","description":"The command this argument belongs to.","type":[[["Command"]]],"meta":{"line":27,"file":"Argument.js","path":"src/struct/commands/arguments"}},{"name":"match","description":"The method to match text.","type":[[["ArgumentMatch"]]],"meta":{"line":33,"file":"Argument.js","path":"src/struct/commands/arguments"}},{"name":"type","description":"The type to cast to or a function to use to cast.","type":[[["ArgumentType"]],[["ArgumentTypeCaster"]]],"meta":{"line":39,"file":"Argument.js","path":"src/struct/commands/arguments"}},{"name":"flag","description":"The string(s) to use for flag or option match.","type":[[["string"]],[["Array","<"],["string",">"]]],"meta":{"line":45,"file":"Argument.js","path":"src/struct/commands/arguments"}},{"name":"multipleFlags","description":"Whether to process multiple option flags instead of just the first.","type":[[["boolean"]]],"meta":{"line":51,"file":"Argument.js","path":"src/struct/commands/arguments"}},{"name":"index","description":"The index to start from.","nullable":true,"type":[[["number"]]],"meta":{"line":57,"file":"Argument.js","path":"src/struct/commands/arguments"}},{"name":"unordered","description":"Whether or not the argument is unordered.","type":[[["boolean"]],[["number"]],[["Array","<"],["number",">"]]],"meta":{"line":63,"file":"Argument.js","path":"src/struct/commands/arguments"}},{"name":"limit","description":"The amount of phrases to match for rest, separate, content, or text match.","type":[[["number"]]],"meta":{"line":69,"file":"Argument.js","path":"src/struct/commands/arguments"}},{"name":"prompt","description":"The prompt options.","nullable":true,"type":[[["ArgumentPromptOptions"]]],"meta":{"line":75,"file":"Argument.js","path":"src/struct/commands/arguments"}},{"name":"default","description":"The default value of the argument or a function supplying the default value.","type":[[["DefaultValueSupplier"]],[["any"]]],"meta":{"line":81,"file":"Argument.js","path":"src/struct/commands/arguments"}},{"name":"otherwise","description":"The content or function supplying the content sent when argument parsing fails.","type":[[["StringResolvable"]],[["MessageOptions"]],[["MessageAdditions"]],[["OtherwiseContentSupplier"]]],"meta":{"line":87,"file":"Argument.js","path":"src/struct/commands/arguments"}},{"name":"client","description":"The client.","type":[[["AkairoClient"]]],"meta":{"line":94,"file":"Argument.js","path":"src/struct/commands/arguments"}},{"name":"handler","description":"The command handler.","type":[[["CommandHandler"]]],"meta":{"line":102,"file":"Argument.js","path":"src/struct/commands/arguments"}}],"methods":[{"name":"process","description":"Processes the type casting and prompting of the argument for a phrase.","params":[{"name":"message","description":"The message that called the command.","type":[[["Message"]]]},{"name":"phrase","description":"The phrase to process.","type":[[["string"]]]}],"async":true,"returns":[[["Promise","<"],["any",">"]]],"meta":{"line":112,"file":"Argument.js","path":"src/struct/commands/arguments"}},{"name":"cast","description":"Casts a phrase to this argument's type.","params":[{"name":"message","description":"Message that called the command.","type":[[["Message"]]]},{"name":"phrase","description":"Phrase to process.","type":[[["string"]]]}],"returns":[[["Promise","<"],["any",">"]]],"meta":{"line":156,"file":"Argument.js","path":"src/struct/commands/arguments"}},{"name":"collect","description":"Collects input from the user by prompting.","params":[{"name":"message","description":"Message to prompt.","type":[[["Message"]]]},{"name":"commandInput","description":"Previous input from command if there was one.","optional":true,"type":[[["string"]]]},{"name":"parsedInput","description":"Previous parsed input from command if there was one.","optional":true,"default":null,"type":[[["any"]]]}],"async":true,"returns":[[["Promise","<("],["ParsingFlag","|"],["any",")>"]]],"meta":{"line":167,"file":"Argument.js","path":"src/struct/commands/arguments"}},{"name":"cast","description":"Casts a phrase to the specified type.","scope":"static","params":[{"name":"type","description":"Type to use.","type":[[["ArgumentType"]],[["ArgumentTypeCaster"]]]},{"name":"resolver","description":"Type resolver to use.","type":[[["TypeResolver"]]]},{"name":"message","description":"Message that called the command.","type":[[["Message"]]]},{"name":"phrase","description":"Phrase to process.","type":[[["string"]]]}],"async":true,"returns":[[["Promise","<"],["any",">"]]],"meta":{"line":317,"file":"Argument.js","path":"src/struct/commands/arguments"}},{"name":"union","description":"Creates a type from multiple types (union type).\nThe first type that resolves to a non-void value is used.","scope":"static","params":[{"name":"types","description":"Types to use.","variable":true,"type":[[["ArgumentType"]],[["ArgumentTypeCaster"]]]}],"returns":[[["ArgumentTypeCaster"]]],"meta":{"line":371,"file":"Argument.js","path":"src/struct/commands/arguments"}},{"name":"tuple","description":"Creates a type from multiple types (tuple type).\nOnly inputs where each type resolves with a non-void value are valid.","scope":"static","params":[{"name":"types","description":"Types to use.","variable":true,"type":[[["ArgumentType"]],[["ArgumentTypeCaster"]]]}],"returns":[[["ArgumentTypeCaster"]]],"meta":{"line":389,"file":"Argument.js","path":"src/struct/commands/arguments"}},{"name":"validate","description":"Creates a type with extra validation.\nIf the predicate is not true, the value is considered invalid.","scope":"static","params":[{"name":"type","description":"The type to use.","type":[[["ArgumentType"]],[["ArgumentTypeCaster"]]]},{"name":"predicate","description":"The predicate function.","type":[[["ParsedValuePredicate"]]]}],"returns":[[["ArgumentTypeCaster"]]],"meta":{"line":410,"file":"Argument.js","path":"src/struct/commands/arguments"}},{"name":"range","description":"Creates a type where the parsed value must be within a range.","scope":"static","params":[{"name":"type","description":"The type to use","type":[[["ArgumentType"]],[["ArgumentTypeCaster"]]]},{"name":"min","description":"Minimum value.","type":[[["number"]]]},{"name":"max","description":"Maximum value.","type":[[["number"]]]},{"name":"inclusive","description":"Whether or not to be inclusive on the upper bound.","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["ArgumentTypeCaster"]]],"meta":{"line":428,"file":"Argument.js","path":"src/struct/commands/arguments"}},{"name":"compose","description":"Creates a type that takes the result of the first type and runs it with the second.\nThe first type should return a string since types expect a string as the input.","scope":"static","params":[{"name":"type1","description":"First type.","type":[[["ArgumentType"]],[["ArgumentTypeCaster"]]]},{"name":"type2","description":"Second type.","type":[[["ArgumentType"]],[["ArgumentTypeCaster"]]]},{"name":"ignoreVoid","description":"Whether or not to return null if the first type resolved with a void value.","optional":true,"default":true,"type":[[["boolean"]]]}],"returns":[[["ArgumentTypeCaster"]]],"meta":{"line":440,"file":"Argument.js","path":"src/struct/commands/arguments"}},{"name":"withInput","description":"Creates a type that parses as normal but also carries the original input.\nResult is in an object `{ input, value }` and wrapped in `Flag.fail` when failed.","scope":"static","params":[{"name":"type","description":"The type to use.","type":[[["ArgumentType"]],[["ArgumentTypeCaster"]]]}],"returns":[[["ArgumentTypeCaster"]]],"meta":{"line":456,"file":"Argument.js","path":"src/struct/commands/arguments"}},{"name":"isFailure","description":"Checks if something is null, undefined, or a fail flag.","scope":"static","params":[{"name":"value","description":"Value to check.","type":[[["any"]]]}],"returns":[[["boolean"]]],"meta":{"line":473,"file":"Argument.js","path":"src/struct/commands/arguments"}}],"meta":{"line":11,"file":"Argument.js","path":"src/struct/commands/arguments"}},{"name":"TypeResolver","construct":{"name":"TypeResolver","description":"Type resolver for command arguments.\nThe types are documented under ArgumentType.","params":[{"name":"handler","description":"The command handler.","type":[[["CommandHandler"]]]}]},"props":[{"name":"client","description":"The Akairo client.","type":[[["AkairoClient"]]],"meta":{"line":16,"file":"TypeResolver.js","path":"src/struct/commands/arguments"}},{"name":"commandHandler","description":"The command handler.","type":[[["CommandHandler"]]],"meta":{"line":22,"file":"TypeResolver.js","path":"src/struct/commands/arguments"}},{"name":"inhibitorHandler","description":"The inhibitor handler.","type":[[["InhibitorHandler"]]],"meta":{"line":28,"file":"TypeResolver.js","path":"src/struct/commands/arguments"}},{"name":"listenerHandler","description":"The listener handler.","type":[[["ListenerHandler"]]],"meta":{"line":34,"file":"TypeResolver.js","path":"src/struct/commands/arguments"}},{"name":"types","description":"Collection of types.","type":[[["Collection","<"],["string",", "],["ArgumentTypeCaster",">"]]],"meta":{"line":40,"file":"TypeResolver.js","path":"src/struct/commands/arguments"}}],"methods":[{"name":"addBuiltInTypes","description":"Adds built-in types.","returns":[[["void"]]],"meta":{"line":49,"file":"TypeResolver.js","path":"src/struct/commands/arguments"}},{"name":"type","description":"Gets the resolver function for a type.","params":[{"name":"name","description":"Name of type.","type":[[["string"]]]}],"returns":[[["ArgumentTypeCaster"]]],"meta":{"line":382,"file":"TypeResolver.js","path":"src/struct/commands/arguments"}},{"name":"addType","description":"Adds a new type.","params":[{"name":"name","description":"Name of the type.","type":[[["string"]]]},{"name":"fn","description":"Function that casts the type.","type":[[["ArgumentTypeCaster"]]]}],"returns":[[["TypeResolver"]]],"meta":{"line":392,"file":"TypeResolver.js","path":"src/struct/commands/arguments"}},{"name":"addTypes","description":"Adds multiple new types.","params":[{"name":"types","description":"Object with keys as the type name and values as the cast function.","type":[[["Object"]]]}],"returns":[[["TypeResolver"]]],"meta":{"line":402,"file":"TypeResolver.js","path":"src/struct/commands/arguments"}}],"meta":{"line":11,"file":"TypeResolver.js","path":"src/struct/commands/arguments"}},{"name":"Command","extends":["AkairoModule"],"construct":{"name":"Command","description":"Creates a new command.","params":[{"name":"id","description":"Command ID.","type":[[["string"]]]},{"name":"options","description":"Options for the command.","optional":true,"default":"{}","type":[[["CommandOptions"]]]}]},"props":[{"name":"aliases","description":"Command names.","type":[[["Array","<"],["string",">"]]],"meta":{"line":47,"file":"Command.js","path":"src/struct/commands"}},{"name":"channel","description":"Usable only in this channel type.","nullable":true,"type":[[["string"]]],"meta":{"line":69,"file":"Command.js","path":"src/struct/commands"}},{"name":"ownerOnly","description":"Usable only by the client owner.","type":[[["boolean"]]],"meta":{"line":75,"file":"Command.js","path":"src/struct/commands"}},{"name":"editable","description":"Whether or not this command can be ran by an edit.","type":[[["boolean"]]],"meta":{"line":81,"file":"Command.js","path":"src/struct/commands"}},{"name":"typing","description":"Whether or not to type during command execution.","type":[[["boolean"]]],"meta":{"line":87,"file":"Command.js","path":"src/struct/commands"}},{"name":"cooldown","description":"Cooldown in milliseconds.","nullable":true,"type":[[["number"]]],"meta":{"line":93,"file":"Command.js","path":"src/struct/commands"}},{"name":"ratelimit","description":"Uses allowed before cooldown.","type":[[["number"]]],"meta":{"line":99,"file":"Command.js","path":"src/struct/commands"}},{"name":"defaultPrompt","description":"Default prompt options.","type":[[["ArgumentPromptOptions"]]],"meta":{"line":105,"file":"Command.js","path":"src/struct/commands"}},{"name":"description","description":"Description of the command.","type":[[["string"]],[["any"]]],"meta":{"line":111,"file":"Command.js","path":"src/struct/commands"}},{"name":"prefix","description":"Command prefix overwrite.","type":[[["string"]],[["Array","<"],["string",">"]],[["PrefixSupplier"]]],"meta":{"line":117,"file":"Command.js","path":"src/struct/commands"}},{"name":"clientPermissions","description":"Permissions required to run command by the client.","type":[[["PermissionResolvable"]],[["Array","<"],["PermissionResolvable",">"]],[["MissingPermissionSupplier"]]],"meta":{"line":123,"file":"Command.js","path":"src/struct/commands"}},{"name":"userPermissions","description":"Permissions required to run command by the user.","type":[[["PermissionResolvable"]],[["Array","<"],["PermissionResolvable",">"]],[["MissingPermissionSupplier"]]],"meta":{"line":129,"file":"Command.js","path":"src/struct/commands"}},{"name":"regex","description":"The regex trigger for this command.","type":[[["RegExp"]],[["TriggerFunction"]]],"meta":{"line":135,"file":"Command.js","path":"src/struct/commands"}},{"name":"lock","description":"The key supplier for the locker.","nullable":true,"type":[[["KeySupplier"]]],"meta":{"line":157,"file":"Command.js","path":"src/struct/commands"}},{"name":"locker","description":"Stores the current locks.","nullable":true,"type":[[["Set","<"],["string",">"]]],"meta":{"line":172,"file":"Command.js","path":"src/struct/commands"}},{"name":"ignoreCooldown","description":"ID of user(s) to ignore cooldown or a function to ignore.","type":[[["Snowflake"]],[["Array","<"],["Snowflake",">"]],[["IgnoreCheckPredicate"]]],"meta":{"line":179,"file":"Command.js","path":"src/struct/commands"}},{"name":"ignorePermissions","description":"ID of user(s) to ignore `userPermissions` checks or a function to ignore.","type":[[["Snowflake"]],[["Array","<"],["Snowflake",">"]],[["IgnoreCheckPredicate"]]],"meta":{"line":185,"file":"Command.js","path":"src/struct/commands"}},{"name":"id","description":"ID of the module.","type":[[["string"]]],"meta":{"line":12,"file":"AkairoModule.js","path":"src/struct"}},{"name":"categoryID","description":"ID of the category this belongs to.","type":[[["string"]]],"meta":{"line":18,"file":"AkairoModule.js","path":"src/struct"}},{"name":"category","description":"Category this belongs to.","type":[[["Category"]]],"meta":{"line":24,"file":"AkairoModule.js","path":"src/struct"}},{"name":"filepath","description":"The filepath.","type":[[["string"]]],"meta":{"line":30,"file":"AkairoModule.js","path":"src/struct"}},{"name":"client","description":"The Akairo client.","type":[[["AkairoClient"]]],"meta":{"line":36,"file":"AkairoModule.js","path":"src/struct"}},{"name":"handler","description":"The handler.","type":[[["AkairoHandler"]]],"meta":{"line":42,"file":"AkairoModule.js","path":"src/struct"}}],"methods":[{"name":"condition","description":"Checks if the command should be ran by using an arbitrary condition.","params":[{"name":"message","description":"Message being handled.","type":[[["Message"]]]}],"returns":[[["boolean"]]],"meta":{"line":143,"file":"Command.js","path":"src/struct/commands"}},{"name":"before","description":"Runs before argument parsing and execution.","params":[{"name":"message","description":"Message being handled.","type":[[["Message"]]]}],"returns":[[["any"]]],"meta":{"line":151,"file":"Command.js","path":"src/struct/commands"}},{"name":"exec","description":"Executes the command.","abstract":true,"params":[{"name":"message","description":"Message that triggered the command.","type":[[["Message"]]]},{"name":"args","description":"Evaluated arguments.","type":[[["Object"]]]}],"returns":[[["any"]]],"meta":{"line":207,"file":"Command.js","path":"src/struct/commands"}},{"name":"parse","description":"Parses content using the command's arguments.","params":[{"name":"message","description":"Message to use.","type":[[["Message"]]]},{"name":"content","description":"String to parse.","type":[[["string"]]]}],"returns":[[["Promise","<("],["Object","|"],["ParsingFlag",")>"]]],"meta":{"line":217,"file":"Command.js","path":"src/struct/commands"}},{"name":"reload","description":"Reloads the module.","inherits":"AkairoModule#reload","inherited":true,"returns":[[["AkairoModule"]]],"meta":{"line":49,"file":"AkairoModule.js","path":"src/struct"}},{"name":"remove","description":"Removes the module.","inherits":"AkairoModule#remove","inherited":true,"returns":[[["AkairoModule"]]],"meta":{"line":57,"file":"AkairoModule.js","path":"src/struct"}},{"name":"toString","description":"Returns the ID.","inherits":"AkairoModule#toString","inherited":true,"returns":[[["string"]]],"meta":{"line":65,"file":"AkairoModule.js","path":"src/struct"}}],"meta":{"line":8,"file":"Command.js","path":"src/struct/commands"}},{"name":"CommandHandler","extends":["AkairoHandler"],"construct":{"name":"CommandHandler","description":"Loads commands and handles messages.","params":[{"name":"client","description":"The Akairo client.","type":[[["AkairoClient"]]]},{"name":"options","description":"Options.","type":[[["CommandHandlerOptions"]]]}]},"props":[{"name":"resolver","description":"The type resolver.","type":[[["TypeResolver"]]],"meta":{"line":56,"file":"CommandHandler.js","path":"src/struct/commands"}},{"name":"aliases","description":"Collecion of command aliases.","type":[[["Collection","<"],["string",", "],["string",">"]]],"meta":{"line":62,"file":"CommandHandler.js","path":"src/struct/commands"}},{"name":"aliasReplacement","description":"Regular expression to automatically make command aliases for.","nullable":true,"type":[[["RegExp"]]],"meta":{"line":68,"file":"CommandHandler.js","path":"src/struct/commands"}},{"name":"prefixes","description":"Collection of prefix overwrites to commands.","type":[[["Collection","<("],["string","|"],["PrefixSupplier","), "],["Set","<"],["string",">>"]]],"meta":{"line":74,"file":"CommandHandler.js","path":"src/struct/commands"}},{"name":"blockClient","description":"Whether or not to block self.","type":[[["boolean"]]],"meta":{"line":80,"file":"CommandHandler.js","path":"src/struct/commands"}},{"name":"blockBots","description":"Whether or not to block bots.","type":[[["boolean"]]],"meta":{"line":86,"file":"CommandHandler.js","path":"src/struct/commands"}},{"name":"fetchMembers","description":"Whether or not members are fetched on each message author from a guild.","type":[[["boolean"]]],"meta":{"line":92,"file":"CommandHandler.js","path":"src/struct/commands"}},{"name":"handleEdits","description":"Whether or not edits are handled.","type":[[["boolean"]]],"meta":{"line":98,"file":"CommandHandler.js","path":"src/struct/commands"}},{"name":"storeMessages","description":"Whether or not to store messages in CommandUtil.","type":[[["boolean"]]],"meta":{"line":104,"file":"CommandHandler.js","path":"src/struct/commands"}},{"name":"commandUtil","description":"Whether or not `message.util` is assigned.","type":[[["boolean"]]],"meta":{"line":110,"file":"CommandHandler.js","path":"src/struct/commands"}},{"name":"commandUtilLifetime","description":"Milliseconds a message should exist for before its command util instance is marked for removal.","type":[[["number"]]],"meta":{"line":119,"file":"CommandHandler.js","path":"src/struct/commands"}},{"name":"commandUtilSweepInterval","description":"Time interval in milliseconds for sweeping command util instances.","type":[[["number"]]],"meta":{"line":125,"file":"CommandHandler.js","path":"src/struct/commands"}},{"name":"commandUtils","description":"Collection of CommandUtils.","type":[[["Collection","<"],["string",", "],["CommandUtil",">"]]],"meta":{"line":134,"file":"CommandHandler.js","path":"src/struct/commands"}},{"name":"cooldowns","description":"Collection of cooldowns.","type":[[["Collection","<"],["string",", "],["Object",">"]]],"meta":{"line":140,"file":"CommandHandler.js","path":"src/struct/commands"}},{"name":"defaultCooldown","description":"Default cooldown for commands.","type":[[["number"]]],"meta":{"line":146,"file":"CommandHandler.js","path":"src/struct/commands"}},{"name":"ignoreCooldown","description":"ID of user(s) to ignore cooldown or a function to ignore.","type":[[["Snowflake"]],[["Array","<"],["Snowflake",">"]],[["IgnoreCheckPredicate"]]],"meta":{"line":152,"file":"CommandHandler.js","path":"src/struct/commands"}},{"name":"ignorePermissions","description":"ID of user(s) to ignore `userPermissions` checks or a function to ignore.","type":[[["Snowflake"]],[["Array","<"],["Snowflake",">"]],[["IgnoreCheckPredicate"]]],"meta":{"line":158,"file":"CommandHandler.js","path":"src/struct/commands"}},{"name":"prompts","description":"Collection of sets of ongoing argument prompts.","type":[[["Collection","<"],["string",", "],["Set","<"],["string",">>"]]],"meta":{"line":164,"file":"CommandHandler.js","path":"src/struct/commands"}},{"name":"defaultPrompt","description":"Default prompt options.","type":[[["ArgumentPromptOptions"]]],"meta":{"line":170,"file":"CommandHandler.js","path":"src/struct/commands"}},{"name":"prefix","description":"The prefix(es) for command parsing.","type":[[["string"]],[["Array","<"],["string",">"]],[["PrefixSupplier"]]],"meta":{"line":190,"file":"CommandHandler.js","path":"src/struct/commands"}},{"name":"allowMention","description":"Whether or not mentions are allowed for prefixing.","type":[[["boolean"]],[["MentionPrefixPredicate"]]],"meta":{"line":196,"file":"CommandHandler.js","path":"src/struct/commands"}},{"name":"inhibitorHandler","description":"Inhibitor handler to use.","nullable":true,"type":[[["InhibitorHandler"]]],"meta":{"line":202,"file":"CommandHandler.js","path":"src/struct/commands"}},{"name":"directory","description":"Directory to commands.","type":[[["string"]]],"meta":{"line":204,"file":"CommandHandler.js","path":"src/struct/commands"}},{"name":"modules","description":"Commands loaded, mapped by ID to Command.","type":[[["Collection","<"],["string",", "],["Command",">"]]],"meta":{"line":210,"file":"CommandHandler.js","path":"src/struct/commands"}},{"name":"client","description":"The Akairo client.","type":[[["AkairoClient"]]],"meta":{"line":30,"file":"AkairoHandler.js","path":"src/struct"}},{"name":"classToHandle","description":"Class to handle.","type":[[["function"]]],"meta":{"line":42,"file":"AkairoHandler.js","path":"src/struct"}},{"name":"extensions","description":"File extensions to load.","type":[[["Set","<"],["string",">"]]],"meta":{"line":48,"file":"AkairoHandler.js","path":"src/struct"}},{"name":"automateCategories","description":"Whether or not to automate category names.","type":[[["boolean"]]],"meta":{"line":54,"file":"AkairoHandler.js","path":"src/struct"}},{"name":"loadFilter","description":"Function that filters files when loading.","type":[[["LoadPredicate"]]],"meta":{"line":60,"file":"AkairoHandler.js","path":"src/struct"}},{"name":"categories","description":"Categories, mapped by ID to Category.","type":[[["Collection","<"],["string",", "],["Category",">"]]],"meta":{"line":72,"file":"AkairoHandler.js","path":"src/struct"}}],"methods":[{"name":"register","description":"Registers a module.","params":[{"name":"command","description":"Module to use.","type":[[["Command"]]]},{"name":"filepath","description":"Filepath of module.","optional":true,"type":[[["string"]]]}],"returns":[[["void"]]],"meta":{"line":243,"file":"CommandHandler.js","path":"src/struct/commands"}},{"name":"deregister","description":"Deregisters a module.","params":[{"name":"command","description":"Module to use.","type":[[["Command"]]]}],"returns":[[["void"]]],"meta":{"line":297,"file":"CommandHandler.js","path":"src/struct/commands"}},{"name":"handle","description":"Handles a message.","params":[{"name":"message","description":"Message to handle.","type":[[["Message"]]]}],"async":true,"returns":[[["Promise","<?"],["boolean",">"]]],"meta":{"line":336,"file":"CommandHandler.js","path":"src/struct/commands"}},{"name":"handleDirectCommand","description":"Handles normal commands.","params":[{"name":"message","description":"Message to handle.","type":[[["Message"]]]},{"name":"content","description":"Content of message without command.","type":[[["string"]]]},{"name":"command","description":"Command instance.","type":[[["Command"]]]},{"name":"ignore","description":"Ignore inhibitors and other checks.","optional":true,"default":false,"type":[[["boolean"]]]}],"async":true,"returns":[[["Promise","<?"],["boolean",">"]]],"meta":{"line":398,"file":"CommandHandler.js","path":"src/struct/commands"}},{"name":"handleRegexAndConditionalCommands","description":"Handles regex and conditional commands.","params":[{"name":"message","description":"Message to handle.","type":[[["Message"]]]}],"async":true,"returns":[[["Promise","<"],["boolean",">"]]],"meta":{"line":449,"file":"CommandHandler.js","path":"src/struct/commands"}},{"name":"handleRegexCommands","description":"Handles regex commands.","params":[{"name":"message","description":"Message to handle.","type":[[["Message"]]]}],"async":true,"returns":[[["Promise","<"],["boolean",">"]]],"meta":{"line":460,"file":"CommandHandler.js","path":"src/struct/commands"}},{"name":"handleConditionalCommands","description":"Handles conditional commands.","params":[{"name":"message","description":"Message to handle.","type":[[["Message"]]]}],"async":true,"returns":[[["Promise","<"],["boolean",">"]]],"meta":{"line":514,"file":"CommandHandler.js","path":"src/struct/commands"}},{"name":"runAllTypeInhibitors","description":"Runs inhibitors with the all type.","params":[{"name":"message","description":"Message to handle.","type":[[["Message"]]]}],"async":true,"returns":[[["Promise","<"],["boolean",">"]]],"meta":{"line":547,"file":"CommandHandler.js","path":"src/struct/commands"}},{"name":"runPreTypeInhibitors","description":"Runs inhibitors with the pre type.","params":[{"name":"message","description":"Message to handle.","type":[[["Message"]]]}],"async":true,"returns":[[["Promise","<"],["boolean",">"]]],"meta":{"line":572,"file":"CommandHandler.js","path":"src/struct/commands"}},{"name":"runPostTypeInhibitors","description":"Runs inhibitors with the post type.","params":[{"name":"message","description":"Message to handle.","type":[[["Message"]]]},{"name":"command","description":"Command to handle.","type":[[["Command"]]]}],"async":true,"returns":[[["Promise","<"],["boolean",">"]]],"meta":{"line":592,"file":"CommandHandler.js","path":"src/struct/commands"}},{"name":"runPermissionChecks","description":"Runs permission checks.","params":[{"name":"message","description":"Message that called the command.","type":[[["Message"]]]},{"name":"command","description":"Command to cooldown.","type":[[["Command"]]]}],"async":true,"returns":[[["Promise","<"],["boolean",">"]]],"meta":{"line":637,"file":"CommandHandler.js","path":"src/struct/commands"}},{"name":"runCooldowns","description":"Runs cooldowns and checks if a user is under cooldown.","params":[{"name":"message","description":"Message that called the command.","type":[[["Message"]]]},{"name":"command","description":"Command to cooldown.","type":[[["Command"]]]}],"returns":[[["boolean"]]],"meta":{"line":692,"file":"CommandHandler.js","path":"src/struct/commands"}},{"name":"runCommand","description":"Runs a command.","params":[{"name":"message","description":"Message to handle.","type":[[["Message"]]]},{"name":"command","description":"Command to handle.","type":[[["Command"]]]},{"name":"args","description":"Arguments to use.","type":[[["Object"]]]}],"async":true,"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":746,"file":"CommandHandler.js","path":"src/struct/commands"}},{"name":"parseCommand","description":"Parses the command and its argument list.","params":[{"name":"message","description":"Message that called the command.","type":[[["Message"]]]}],"async":true,"returns":[[["Promise","<"],["Object",">"]]],"meta":{"line":767,"file":"CommandHandler.js","path":"src/struct/commands"}},{"name":"parseCommandOverwrittenPrefixes","description":"Parses the command and its argument list using prefix overwrites.","params":[{"name":"message","description":"Message that called the command.","type":[[["Message"]]]}],"async":true,"returns":[[["Promise","<"],["Object",">"]]],"meta":{"line":784,"file":"CommandHandler.js","path":"src/struct/commands"}},{"name":"parseMultiplePrefixes","description":"Runs parseWithPrefix on multiple prefixes and returns the best parse.","params":[{"name":"message","description":"Message to parse.","type":[[["Message"]]]},{"name":"pairs","description":"Pairs of prefix to associated commands.\nThat is, `[string, Set<string> | null][]`.","type":[[["Array","<"],["any",">"]]]}],"returns":[[["Object"]]],"meta":{"line":806,"file":"CommandHandler.js","path":"src/struct/commands"}},{"name":"parseWithPrefix","description":"Tries to parse a message with the given prefix and associated commands.\nAssociated commands refer to when a prefix is used in prefix overrides.","params":[{"name":"message","description":"Message to parse.","type":[[["Message"]]]},{"name":"prefix","description":"Prefix to use.","type":[[["string"]]]},{"name":"associatedCommands","description":"Associated commands.","optional":true,"default":null,"type":[[["Set","<"],["string",">"]]]}],"returns":[[["Object"]]],"meta":{"line":829,"file":"CommandHandler.js","path":"src/struct/commands"}},{"name":"emitError","description":"Handles errors from the handling.","params":[{"name":"err","description":"The error.","type":[[["Error"]]]},{"name":"message","description":"Message that called the command.","type":[[["Message"]]]},{"name":"command","description":"Command that errored.","optional":true,"type":[[["Command"]]]}],"returns":[[["void"]]],"meta":{"line":864,"file":"CommandHandler.js","path":"src/struct/commands"}},{"name":"sweepCommandUtil","description":"Sweep command util instances from cache and returns amount sweeped.","params":[{"name":"lifetime","description":"Messages older than this will have their command util instance sweeped.\nThis is in milliseconds and defaults to the `commandUtilLifetime` option.","type":[[["number"]]]}],"returns":[[["number"]]],"meta":{"line":880,"file":"CommandHandler.js","path":"src/struct/commands"}},{"name":"addPrompt","description":"Adds an ongoing prompt in order to prevent command usage in the channel.","params":[{"name":"channel","description":"Channel to add to.","type":[[["Channel"]]]},{"name":"user","description":"User to add.","type":[[["User"]]]}],"returns":[[["void"]]],"meta":{"line":900,"file":"CommandHandler.js","path":"src/struct/commands"}},{"name":"removePrompt","description":"Removes an ongoing prompt.","params":[{"name":"channel","description":"Channel to remove from.","type":[[["Channel"]]]},{"name":"user","description":"User to remove.","type":[[["User"]]]}],"returns":[[["void"]]],"meta":{"line":913,"file":"CommandHandler.js","path":"src/struct/commands"}},{"name":"hasPrompt","description":"Checks if there is an ongoing prompt.","params":[{"name":"channel","description":"Channel to check.","type":[[["Channel"]]]},{"name":"user","description":"User to check.","type":[[["User"]]]}],"returns":[[["boolean"]]],"meta":{"line":926,"file":"CommandHandler.js","path":"src/struct/commands"}},{"name":"findCommand","description":"Finds a command by alias.","params":[{"name":"name","description":"Alias to find with.","type":[[["string"]]]}],"returns":[[["Command"]]],"meta":{"line":937,"file":"CommandHandler.js","path":"src/struct/commands"}},{"name":"useInhibitorHandler","description":"Set the inhibitor handler to use.","params":[{"name":"inhibitorHandler","description":"The inhibitor handler.","type":[[["InhibitorHandler"]]]}],"returns":[[["CommandHandler"]]],"meta":{"line":946,"file":"CommandHandler.js","path":"src/struct/commands"}},{"name":"useListenerHandler","description":"Set the listener handler to use.","params":[{"name":"listenerHandler","description":"The listener handler.","type":[[["ListenerHandler"]]]}],"returns":[[["CommandHandler"]]],"meta":{"line":958,"file":"CommandHandler.js","path":"src/struct/commands"}},{"name":"load","description":"Loads a module, can be a module class or a filepath.","inherits":"AkairoHandler#load","inherited":true,"params":[{"name":"thing","description":"Module class or path to module.","type":[[["string"]],[["function"]]]},{"name":"isReload","description":"Whether this is a reload or not.","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["AkairoModule"]]],"meta":{"line":118,"file":"AkairoHandler.js","path":"src/struct"}},{"name":"loadAll","description":"Reads all modules from a directory and loads them.","inherits":"AkairoHandler#loadAll","inherited":true,"params":[{"name":"directory","description":"Directory to load from.\nDefaults to the directory passed in the constructor.","optional":true,"type":[[["string"]]]},{"name":"filter","description":"Filter for files, where true means it should be loaded.\nDefaults to the filter passed in the constructor.","optional":true,"type":[[["LoadPredicate"]]]}],"returns":[[["AkairoHandler"]]],"meta":{"line":152,"file":"AkairoHandler.js","path":"src/struct"}},{"name":"remove","description":"Removes a module.","inherits":"AkairoHandler#remove","inherited":true,"params":[{"name":"id","description":"ID of the module.","type":[[["string"]]]}],"returns":[[["AkairoModule"]]],"meta":{"line":167,"file":"AkairoHandler.js","path":"src/struct"}},{"name":"removeAll","description":"Removes all modules.","inherits":"AkairoHandler#removeAll","inherited":true,"returns":[[["AkairoHandler"]]],"meta":{"line":181,"file":"AkairoHandler.js","path":"src/struct"}},{"name":"reload","description":"Reloads a module.","inherits":"AkairoHandler#reload","inherited":true,"params":[{"name":"id","description":"ID of the module.","type":[[["string"]]]}],"returns":[[["AkairoModule"]]],"meta":{"line":194,"file":"AkairoHandler.js","path":"src/struct"}},{"name":"reloadAll","description":"Reloads all modules.","inherits":"AkairoHandler#reloadAll","inherited":true,"returns":[[["AkairoHandler"]]],"meta":{"line":210,"file":"AkairoHandler.js","path":"src/struct"}},{"name":"findCategory","description":"Finds a category by name.","inherits":"AkairoHandler#findCategory","inherited":true,"params":[{"name":"name","description":"Name to find with.","type":[[["string"]]]}],"returns":[[["Category"]]],"meta":{"line":223,"file":"AkairoHandler.js","path":"src/struct"}}],"events":[{"name":"messageBlocked","description":"Emitted when a message is blocked by a pre-message inhibitor.\nThe built-in inhibitors are 'client' and 'bot'.","params":[{"name":"message","description":"Message sent.","type":[[["Message"]]]},{"name":"reason","description":"Reason for the block.","type":[[["string"]]]}],"meta":{"line":1015,"file":"CommandHandler.js","path":"src/struct/commands"}},{"name":"messageInvalid","description":"Emitted when a message does not start with the prefix or match a command.","params":[{"name":"message","description":"Message sent.","type":[[["Message"]]]}],"meta":{"line":1023,"file":"CommandHandler.js","path":"src/struct/commands"}},{"name":"commandDisabled","description":"Emitted when a command is found disabled.","params":[{"name":"message","description":"Message sent.","type":[[["Message"]]]},{"name":"command","description":"Command found.","type":[[["Command"]]]}],"meta":{"line":1029,"file":"CommandHandler.js","path":"src/struct/commands"}},{"name":"commandBlocked","description":"Emitted when a command is blocked by a post-message inhibitor.\nThe built-in inhibitors are 'owner', 'guild', and 'dm'.","params":[{"name":"message","description":"Message sent.","type":[[["Message"]]]},{"name":"command","description":"Command blocked.","type":[[["Command"]]]},{"name":"reason","description":"Reason for the block.","type":[[["string"]]]}],"meta":{"line":1036,"file":"CommandHandler.js","path":"src/struct/commands"}},{"name":"commandStarted","description":"Emitted when a command starts execution.","params":[{"name":"message","description":"Message sent.","type":[[["Message"]]]},{"name":"command","description":"Command executed.","type":[[["Command"]]]},{"name":"args","description":"The args passed to the command.","type":[[["Object"]]]}],"meta":{"line":1045,"file":"CommandHandler.js","path":"src/struct/commands"}},{"name":"commandFinished","description":"Emitted when a command finishes execution.","params":[{"name":"message","description":"Message sent.","type":[[["Message"]]]},{"name":"command","description":"Command executed.","type":[[["Command"]]]},{"name":"args","description":"The args passed to the command.","type":[[["Object"]]]},{"name":"returnValue","description":"The command's return value.","type":[[["any"]]]}],"meta":{"line":1053,"file":"CommandHandler.js","path":"src/struct/commands"}},{"name":"commandCancelled","description":"Emitted when a command is cancelled via prompt or argument cancel.","params":[{"name":"message","description":"Message sent.","type":[[["Message"]]]},{"name":"command","description":"Command executed.","type":[[["Command"]]]},{"name":"retryMessage","description":"Message to retry with.\nThis is passed when a prompt was broken out of with a message that looks like a command.","nullable":true,"type":[[["Message"]]]}],"meta":{"line":1062,"file":"CommandHandler.js","path":"src/struct/commands"}},{"name":"cooldown","description":"Emitted when a command is found on cooldown.","params":[{"name":"message","description":"Message sent.","type":[[["Message"]]]},{"name":"command","description":"Command blocked.","type":[[["Command"]]]},{"name":"remaining","description":"Remaining time in milliseconds for cooldown.","type":[[["number"]]]}],"meta":{"line":1071,"file":"CommandHandler.js","path":"src/struct/commands"}},{"name":"inPrompt","description":"Emitted when a user is in a command argument prompt.\nUsed to prevent usage of commands during a prompt.","params":[{"name":"message","description":"Message sent.","type":[[["Message"]]]}],"meta":{"line":1079,"file":"CommandHandler.js","path":"src/struct/commands"}},{"name":"missingPermissions","description":"Emitted when a permissions check is failed.","params":[{"name":"message","description":"Message sent.","type":[[["Message"]]]},{"name":"command","description":"Command blocked.","type":[[["Command"]]]},{"name":"type","description":"Either 'client' or 'user'.","type":[[["string"]]]},{"name":"missing","description":"The missing permissions.","type":[[["any"]]]}],"meta":{"line":1086,"file":"CommandHandler.js","path":"src/struct/commands"}},{"name":"error","description":"Emitted when a command or inhibitor errors.","params":[{"name":"error","description":"The error.","type":[[["Error"]]]},{"name":"message","description":"Message sent.","type":[[["Message"]]]},{"name":"command","description":"Command executed.","nullable":true,"type":[[["Command"]]]}],"meta":{"line":1095,"file":"CommandHandler.js","path":"src/struct/commands"}},{"name":"load","description":"Emitted when a command is loaded.","params":[{"name":"command","description":"Module loaded.","type":[[["Command"]]]},{"name":"isReload","description":"Whether or not this was a reload.","type":[[["boolean"]]]}],"meta":{"line":1103,"file":"CommandHandler.js","path":"src/struct/commands"}},{"name":"remove","description":"Emitted when a command is removed.","params":[{"name":"command","description":"Command removed.","type":[[["Command"]]]}],"meta":{"line":1110,"file":"CommandHandler.js","path":"src/struct/commands"}}],"meta":{"line":12,"file":"CommandHandler.js","path":"src/struct/commands"}},{"name":"CommandUtil","construct":{"name":"CommandUtil","description":"Command utilies.","params":[{"name":"handler","description":"The command handler.","type":[[["CommandHandler"]]]},{"name":"message","description":"Message that triggered the command.","type":[[["Message"]]]}]},"props":[{"name":"handler","description":"The command handler.","type":[[["CommandHandler"]]],"meta":{"line":14,"file":"CommandUtil.js","path":"src/struct/commands"}},{"name":"message","description":"Message that triggered the command.","type":[[["Message"]]],"meta":{"line":20,"file":"CommandUtil.js","path":"src/struct/commands"}},{"name":"parsed","description":"The parsed components.","nullable":true,"type":[[["ParsedComponentData"]]],"meta":{"line":26,"file":"CommandUtil.js","path":"src/struct/commands"}},{"name":"shouldEdit","description":"Whether or not the last response should be edited.","type":[[["boolean"]]],"meta":{"line":32,"file":"CommandUtil.js","path":"src/struct/commands"}},{"name":"lastResponse","description":"The last response sent.","nullable":true,"type":[[["Message"]]],"meta":{"line":38,"file":"CommandUtil.js","path":"src/struct/commands"}},{"name":"messages","description":"Messages stored from prompts and prompt replies.","type":[[["Collection","<"],["Snowflake",", "],["Message",">"]]],"meta":{"line":45,"file":"CommandUtil.js","path":"src/struct/commands"}}],"methods":[{"name":"setLastResponse","description":"Sets the last repsonse.","params":[{"name":"message","description":"Message to set.","type":[[["Message"]],[["Array","<"],["Message",">"]]]}],"returns":[[["Message"]]],"meta":{"line":56,"file":"CommandUtil.js","path":"src/struct/commands"}},{"name":"addMessage","description":"Adds client prompt or user reply to messages.","params":[{"name":"message","description":"Message to add.","type":[[["Message"]],[["Array","<"],["Message",">"]]]}],"returns":[[["Message"]],[["Array","<"],["Message",">"]]],"meta":{"line":71,"file":"CommandUtil.js","path":"src/struct/commands"}},{"name":"setEditable","description":"Changes if the message should be edited.","params":[{"name":"state","description":"Change to editable or not.","type":[[["boolean"]]]}],"returns":[[["CommandUtil"]]],"meta":{"line":90,"file":"CommandUtil.js","path":"src/struct/commands"}},{"name":"send","description":"Sends a response or edits an old response if available.","params":[{"name":"content","description":"Content to send.","optional":true,"default":"''","type":[[["StringResolvable"]]]},{"name":"options","description":"Options to use.","optional":true,"default":"{}","type":[[["MessageOptions"]],[["MessageAdditions"]]]}],"async":true,"returns":[[["Promise","<("],["Message","|"],["Array","<"],["Message",">)>"]]],"meta":{"line":101,"file":"CommandUtil.js","path":"src/struct/commands"}},{"name":"sendNew","description":"Sends a response, overwriting the last response.","params":[{"name":"content","description":"Content to send.","optional":true,"default":"''","type":[[["StringResolvable"]]]},{"name":"options","description":"Options to use.","optional":true,"default":"{}","type":[[["MessageOptions"]],[["MessageAdditions"]]]}],"async":true,"returns":[[["Promise","<("],["Message","|"],["Array","<"],["Message",">)>"]]],"meta":{"line":122,"file":"CommandUtil.js","path":"src/struct/commands"}},{"name":"reply","description":"Sends a response with a mention concantenated to it.","params":[{"name":"content","description":"Content to send.","optional":true,"default":"''","type":[[["StringResolvable"]]]},{"name":"options","description":"Options to use.","optional":true,"default":"{}","type":[[["MessageOptions"]],[["MessageAdditions"]]]}],"returns":[[["Promise","<("],["Message","|"],["Array","<"],["Message",">)>"]]],"meta":{"line":135,"file":"CommandUtil.js","path":"src/struct/commands"}},{"name":"edit","description":"Edits the last response.","params":[{"name":"content","description":"Content to send.","optional":true,"default":"''","type":[[["StringResolvable"]]]},{"name":"options","description":"Options to use.","optional":true,"default":"{}","type":[[["MessageEditOptions"]],[["MessageEmbed"]]]}],"returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":145,"file":"CommandUtil.js","path":"src/struct/commands"}},{"name":"transformOptions","description":"Transform options for sending.","scope":"static","params":[{"name":"content","description":"Content to send.","optional":true,"default":"''","type":[[["StringResolvable"]]]},{"name":"options","description":"Options to use.","optional":true,"default":"{}","type":[[["MessageOptions"]],[["MessageAdditions"]]]},{"name":"extra","description":"Extra options to add.","optional":true,"default":"{}","type":[[["MessageOptions"]]]}],"returns":[[["Object"]]],"meta":{"line":156,"file":"CommandUtil.js","path":"src/struct/commands"}}],"meta":{"line":9,"file":"CommandUtil.js","path":"src/struct/commands"}},{"name":"Flag","construct":{"name":"Flag","description":"A special return value during commmand execution or argument parsing.","params":[{"name":"type","description":"Type of flag.","type":[[["string"]]]},{"name":"data","description":"Extra data.","optional":true,"default":"{}","type":[[["any"]]]}]},"methods":[{"name":"cancel","description":"Creates a flag that cancels the command.","scope":"static","returns":[[["Flag"]]],"meta":{"line":16,"file":"Flag.js","path":"src/struct/commands"}},{"name":"retry","description":"Creates a flag that retries with another input.","scope":"static","params":[{"name":"message","description":"Message to handle.","type":[[["Message"]]]}],"returns":[[["Flag"]]],"meta":{"line":25,"file":"Flag.js","path":"src/struct/commands"}},{"name":"fail","description":"Creates a flag that acts as argument cast failure with extra data.","scope":"static","params":[{"name":"value","description":"The extra data for the failure.","type":[[["any"]]]}],"returns":[[["Flag"]]],"meta":{"line":34,"file":"Flag.js","path":"src/struct/commands"}},{"name":"continue","description":"Creates a flag that runs another command with the rest of the arguments.","scope":"static","params":[{"name":"command","description":"Command ID.","type":[[["string"]]]},{"name":"ignore","description":"Whether or not to ignore permission checks.","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"rest","description":"The rest of the arguments.\nIf this is not set, the argument handler will automatically use the rest of the content.","optional":true,"default":null,"type":[[["string"]]]}],"returns":[[["Flag"]]],"meta":{"line":46,"file":"Flag.js","path":"src/struct/commands"}},{"name":"is","description":"Checks if a value is a flag and of some type.","scope":"static","params":[{"name":"value","description":"Value to check.","type":[[["any"]]]},{"name":"type","description":"Type of flag.","type":[[["string"]]]}],"returns":[[["boolean"]]],"meta":{"line":56,"file":"Flag.js","path":"src/struct/commands"}}],"meta":{"line":7,"file":"Flag.js","path":"src/struct/commands"}},{"name":"Inhibitor","extends":["AkairoModule"],"construct":{"name":"Inhibitor","description":"Creates a new Inhibitor.","params":[{"name":"id","description":"Inhibitor ID.","type":[[["string"]]]},{"name":"options","description":"Options for the inhibitor.","optional":true,"default":"{}","type":[[["InhibitorOptions"]]]}]},"props":[{"name":"reason","description":"Reason emitted when command is inhibited.","type":[[["string"]]],"meta":{"line":23,"file":"Inhibitor.js","path":"src/struct/inhibitors"}},{"name":"type","description":"The type of the inhibitor for when it should run.","type":[[["string"]]],"meta":{"line":29,"file":"Inhibitor.js","path":"src/struct/inhibitors"}},{"name":"priority","description":"The priority of the inhibitor.","type":[[["number"]]],"meta":{"line":35,"file":"Inhibitor.js","path":"src/struct/inhibitors"}},{"name":"id","description":"ID of the module.","type":[[["string"]]],"meta":{"line":12,"file":"AkairoModule.js","path":"src/struct"}},{"name":"categoryID","description":"ID of the category this belongs to.","type":[[["string"]]],"meta":{"line":18,"file":"AkairoModule.js","path":"src/struct"}},{"name":"category","description":"Category this belongs to.","type":[[["Category"]]],"meta":{"line":24,"file":"AkairoModule.js","path":"src/struct"}},{"name":"filepath","description":"The filepath.","type":[[["string"]]],"meta":{"line":30,"file":"AkairoModule.js","path":"src/struct"}},{"name":"client","description":"The Akairo client.","type":[[["AkairoClient"]]],"meta":{"line":36,"file":"AkairoModule.js","path":"src/struct"}},{"name":"handler","description":"The handler.","type":[[["AkairoHandler"]]],"meta":{"line":42,"file":"AkairoModule.js","path":"src/struct"}}],"methods":[{"name":"exec","description":"Checks if message should be blocked.\nA return value of true will block the message.\nIf returning a Promise, a resolved value of true will block the message.","abstract":true,"params":[{"name":"message","description":"Message being handled.","type":[[["Message"]]]},{"name":"command","description":"Command to check.","optional":true,"type":[[["Command"]]]}],"returns":[[["boolean"]],[["Promise","<"],["boolean",">"]]],"meta":{"line":59,"file":"Inhibitor.js","path":"src/struct/inhibitors"}},{"name":"reload","description":"Reloads the module.","inherits":"AkairoModule#reload","inherited":true,"returns":[[["AkairoModule"]]],"meta":{"line":49,"file":"AkairoModule.js","path":"src/struct"}},{"name":"remove","description":"Removes the module.","inherits":"AkairoModule#remove","inherited":true,"returns":[[["AkairoModule"]]],"meta":{"line":57,"file":"AkairoModule.js","path":"src/struct"}},{"name":"toString","description":"Returns the ID.","inherits":"AkairoModule#toString","inherited":true,"returns":[[["string"]]],"meta":{"line":65,"file":"AkairoModule.js","path":"src/struct"}}],"meta":{"line":5,"file":"Inhibitor.js","path":"src/struct/inhibitors"}},{"name":"InhibitorHandler","extends":["AkairoHandler"],"construct":{"name":"InhibitorHandler","description":"Loads inhibitors and checks messages.","params":[{"name":"client","description":"The Akairo client.","type":[[["AkairoClient"]]]},{"name":"options","description":"Options.","type":[[["AkairoHandlerOptions"]]]}]},"props":[{"name":"client","description":"The Akairo client.","type":[[["AkairoClient"]]],"meta":{"line":30,"file":"AkairoHandler.js","path":"src/struct"}},{"name":"directory","description":"The main directory to modules.","type":[[["string"]]],"meta":{"line":36,"file":"AkairoHandler.js","path":"src/struct"}},{"name":"classToHandle","description":"Class to handle.","type":[[["function"]]],"meta":{"line":42,"file":"AkairoHandler.js","path":"src/struct"}},{"name":"extensions","description":"File extensions to load.","type":[[["Set","<"],["string",">"]]],"meta":{"line":48,"file":"AkairoHandler.js","path":"src/struct"}},{"name":"automateCategories","description":"Whether or not to automate category names.","type":[[["boolean"]]],"meta":{"line":54,"file":"AkairoHandler.js","path":"src/struct"}},{"name":"loadFilter","description":"Function that filters files when loading.","type":[[["LoadPredicate"]]],"meta":{"line":60,"file":"AkairoHandler.js","path":"src/struct"}},{"name":"modules","description":"Modules loaded, mapped by ID to AkairoModule.","type":[[["Collection","<"],["string",", "],["AkairoModule",">"]]],"meta":{"line":66,"file":"AkairoHandler.js","path":"src/struct"}},{"name":"categories","description":"Categories, mapped by ID to Category.","type":[[["Collection","<"],["string",", "],["Category",">"]]],"meta":{"line":72,"file":"AkairoHandler.js","path":"src/struct"}}],"methods":[{"name":"test","description":"Tests inhibitors against the message.\nReturns the reason if blocked.","params":[{"name":"type","description":"Type of inhibitor, 'all', 'pre', or 'post'.","type":[[["string"]]]},{"name":"message","description":"Message to test.","type":[[["Message"]]]},{"name":"command","description":"Command to use.","optional":true,"type":[[["Command"]]]}],"async":true,"returns":[[["Promise","<("],["string","|"],["void",")>"]]],"meta":{"line":53,"file":"InhibitorHandler.js","path":"src/struct/inhibitors"}},{"name":"register","description":"Registers a module.","inherits":"AkairoHandler#register","inherited":true,"params":[{"name":"mod","description":"Module to use.","type":[[["AkairoModule"]]]},{"name":"filepath","description":"Filepath of module.","optional":true,"type":[[["string"]]]}],"returns":[[["void"]]],"meta":{"line":81,"file":"AkairoHandler.js","path":"src/struct"}},{"name":"deregister","description":"Deregisters a module.","inherits":"AkairoHandler#deregister","inherited":true,"params":[{"name":"mod","description":"Module to use.","type":[[["AkairoModule"]]]}],"returns":[[["void"]]],"meta":{"line":106,"file":"AkairoHandler.js","path":"src/struct"}},{"name":"load","description":"Loads a module, can be a module class or a filepath.","inherits":"AkairoHandler#load","inherited":true,"params":[{"name":"thing","description":"Module class or path to module.","type":[[["string"]],[["function"]]]},{"name":"isReload","description":"Whether this is a reload or not.","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["AkairoModule"]]],"meta":{"line":118,"file":"AkairoHandler.js","path":"src/struct"}},{"name":"loadAll","description":"Reads all modules from a directory and loads them.","inherits":"AkairoHandler#loadAll","inherited":true,"params":[{"name":"directory","description":"Directory to load from.\nDefaults to the directory passed in the constructor.","optional":true,"type":[[["string"]]]},{"name":"filter","description":"Filter for files, where true means it should be loaded.\nDefaults to the filter passed in the constructor.","optional":true,"type":[[["LoadPredicate"]]]}],"returns":[[["AkairoHandler"]]],"meta":{"line":152,"file":"AkairoHandler.js","path":"src/struct"}},{"name":"remove","description":"Removes a module.","inherits":"AkairoHandler#remove","inherited":true,"params":[{"name":"id","description":"ID of the module.","type":[[["string"]]]}],"returns":[[["AkairoModule"]]],"meta":{"line":167,"file":"AkairoHandler.js","path":"src/struct"}},{"name":"removeAll","description":"Removes all modules.","inherits":"AkairoHandler#removeAll","inherited":true,"returns":[[["AkairoHandler"]]],"meta":{"line":181,"file":"AkairoHandler.js","path":"src/struct"}},{"name":"reload","description":"Reloads a module.","inherits":"AkairoHandler#reload","inherited":true,"params":[{"name":"id","description":"ID of the module.","type":[[["string"]]]}],"returns":[[["AkairoModule"]]],"meta":{"line":194,"file":"AkairoHandler.js","path":"src/struct"}},{"name":"reloadAll","description":"Reloads all modules.","inherits":"AkairoHandler#reloadAll","inherited":true,"returns":[[["AkairoHandler"]]],"meta":{"line":210,"file":"AkairoHandler.js","path":"src/struct"}},{"name":"findCategory","description":"Finds a category by name.","inherits":"AkairoHandler#findCategory","inherited":true,"params":[{"name":"name","description":"Name to find with.","type":[[["string"]]]}],"returns":[[["Category"]]],"meta":{"line":223,"file":"AkairoHandler.js","path":"src/struct"}}],"events":[{"name":"load","description":"Emitted when an inhibitor is loaded.","params":[{"name":"inhibitor","description":"Inhibitor loaded.","type":[[["Inhibitor"]]]},{"name":"isReload","description":"Whether or not this was a reload.","type":[[["boolean"]]]}],"meta":{"line":145,"file":"InhibitorHandler.js","path":"src/struct/inhibitors"}},{"name":"remove","description":"Emitted when an inhibitor is removed.","params":[{"name":"inhibitor","description":"Inhibitor removed.","type":[[["Inhibitor"]]]}],"meta":{"line":152,"file":"InhibitorHandler.js","path":"src/struct/inhibitors"}}],"meta":{"line":7,"file":"InhibitorHandler.js","path":"src/struct/inhibitors"}},{"name":"Listener","extends":["AkairoModule"],"construct":{"name":"Listener","description":"Creates a new Listener.","params":[{"name":"id","description":"Listener ID.","type":[[["string"]]]},{"name":"options","description":"Options for the listener.","optional":true,"default":"{}","type":[[["ListenerOptions"]]]}]},"props":[{"name":"emitter","description":"The event emitter.","type":[[["string"]],[["EventEmitter"]]],"meta":{"line":23,"file":"Listener.js","path":"src/struct/listeners"}},{"name":"event","description":"The event name listened to.","type":[[["string"]]],"meta":{"line":29,"file":"Listener.js","path":"src/struct/listeners"}},{"name":"type","description":"Type of listener.","type":[[["string"]]],"meta":{"line":35,"file":"Listener.js","path":"src/struct/listeners"}},{"name":"id","description":"ID of the module.","type":[[["string"]]],"meta":{"line":12,"file":"AkairoModule.js","path":"src/struct"}},{"name":"categoryID","description":"ID of the category this belongs to.","type":[[["string"]]],"meta":{"line":18,"file":"AkairoModule.js","path":"src/struct"}},{"name":"category","description":"Category this belongs to.","type":[[["Category"]]],"meta":{"line":24,"file":"AkairoModule.js","path":"src/struct"}},{"name":"filepath","description":"The filepath.","type":[[["string"]]],"meta":{"line":30,"file":"AkairoModule.js","path":"src/struct"}},{"name":"client","description":"The Akairo client.","type":[[["AkairoClient"]]],"meta":{"line":36,"file":"AkairoModule.js","path":"src/struct"}},{"name":"handler","description":"The handler.","type":[[["AkairoHandler"]]],"meta":{"line":42,"file":"AkairoModule.js","path":"src/struct"}}],"methods":[{"name":"exec","description":"Executes the listener.","abstract":true,"params":[{"name":"args","description":"Arguments.","optional":true,"variable":true,"type":[[["args"]]]}],"returns":[[["any"]]],"meta":{"line":56,"file":"Listener.js","path":"src/struct/listeners"}},{"name":"reload","description":"Reloads the module.","inherits":"AkairoModule#reload","inherited":true,"returns":[[["AkairoModule"]]],"meta":{"line":49,"file":"AkairoModule.js","path":"src/struct"}},{"name":"remove","description":"Removes the module.","inherits":"AkairoModule#remove","inherited":true,"returns":[[["AkairoModule"]]],"meta":{"line":57,"file":"AkairoModule.js","path":"src/struct"}},{"name":"toString","description":"Returns the ID.","inherits":"AkairoModule#toString","inherited":true,"returns":[[["string"]]],"meta":{"line":65,"file":"AkairoModule.js","path":"src/struct"}}],"meta":{"line":5,"file":"Listener.js","path":"src/struct/listeners"}},{"name":"ListenerHandler","extends":["AkairoHandler"],"construct":{"name":"ListenerHandler","description":"Loads listeners and registers them with EventEmitters.","params":[{"name":"client","description":"The Akairo client.","type":[[["AkairoClient"]]]},{"name":"options","description":"Options.","type":[[["AkairoHandlerOptions"]]]}]},"props":[{"name":"emitters","description":"EventEmitters for use, mapped by name to EventEmitter.\nBy default, 'client' is set to the given client.","type":[[["Collection","<"],["string",", "],["EventEmitter",">"]]],"meta":{"line":38,"file":"ListenerHandler.js","path":"src/struct/listeners"}},{"name":"client","description":"The Akairo client.","type":[[["AkairoClient"]]],"meta":{"line":30,"file":"AkairoHandler.js","path":"src/struct"}},{"name":"directory","description":"The main directory to modules.","type":[[["string"]]],"meta":{"line":36,"file":"AkairoHandler.js","path":"src/struct"}},{"name":"classToHandle","description":"Class to handle.","type":[[["function"]]],"meta":{"line":42,"file":"AkairoHandler.js","path":"src/struct"}},{"name":"extensions","description":"File extensions to load.","type":[[["Set","<"],["string",">"]]],"meta":{"line":48,"file":"AkairoHandler.js","path":"src/struct"}},{"name":"automateCategories","description":"Whether or not to automate category names.","type":[[["boolean"]]],"meta":{"line":54,"file":"AkairoHandler.js","path":"src/struct"}},{"name":"loadFilter","description":"Function that filters files when loading.","type":[[["LoadPredicate"]]],"meta":{"line":60,"file":"AkairoHandler.js","path":"src/struct"}},{"name":"modules","description":"Modules loaded, mapped by ID to AkairoModule.","type":[[["Collection","<"],["string",", "],["AkairoModule",">"]]],"meta":{"line":66,"file":"AkairoHandler.js","path":"src/struct"}},{"name":"categories","description":"Categories, mapped by ID to Category.","type":[[["Collection","<"],["string",", "],["Category",">"]]],"meta":{"line":72,"file":"AkairoHandler.js","path":"src/struct"}}],"methods":[{"name":"register","description":"Registers a module.","params":[{"name":"listener","description":"Module to use.","type":[[["Listener"]]]},{"name":"filepath","description":"Filepath of module.","optional":true,"type":[[["string"]]]}],"returns":[[["void"]]],"meta":{"line":60,"file":"ListenerHandler.js","path":"src/struct/listeners"}},{"name":"deregister","description":"Deregisters a module.","params":[{"name":"listener","description":"Module to use.","type":[[["Listener"]]]}],"returns":[[["void"]]],"meta":{"line":72,"file":"ListenerHandler.js","path":"src/struct/listeners"}},{"name":"addToEmitter","description":"Adds a listener to the EventEmitter.","params":[{"name":"id","description":"ID of the listener.","type":[[["string"]]]}],"returns":[[["Listener"]]],"meta":{"line":82,"file":"ListenerHandler.js","path":"src/struct/listeners"}},{"name":"removeFromEmitter","description":"Removes a listener from the EventEmitter.","params":[{"name":"id","description":"ID of the listener.","type":[[["string"]]]}],"returns":[[["Listener"]]],"meta":{"line":103,"file":"ListenerHandler.js","path":"src/struct/listeners"}},{"name":"setEmitters","description":"Sets custom emitters.","params":[{"name":"emitters","description":"Emitters to use.\nThe key is the name and value is the emitter.","type":[[["Object"]]]}],"returns":[[["ListenerHandler"]]],"meta":{"line":120,"file":"ListenerHandler.js","path":"src/struct/listeners"}},{"name":"load","description":"Loads a module, can be a module class or a filepath.","inherits":"AkairoHandler#load","inherited":true,"params":[{"name":"thing","description":"Module class or path to module.","type":[[["string"]],[["function"]]]},{"name":"isReload","description":"Whether this is a reload or not.","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["AkairoModule"]]],"meta":{"line":118,"file":"AkairoHandler.js","path":"src/struct"}},{"name":"loadAll","description":"Reads all modules from a directory and loads them.","inherits":"AkairoHandler#loadAll","inherited":true,"params":[{"name":"directory","description":"Directory to load from.\nDefaults to the directory passed in the constructor.","optional":true,"type":[[["string"]]]},{"name":"filter","description":"Filter for files, where true means it should be loaded.\nDefaults to the filter passed in the constructor.","optional":true,"type":[[["LoadPredicate"]]]}],"returns":[[["AkairoHandler"]]],"meta":{"line":152,"file":"AkairoHandler.js","path":"src/struct"}},{"name":"remove","description":"Removes a module.","inherits":"AkairoHandler#remove","inherited":true,"params":[{"name":"id","description":"ID of the module.","type":[[["string"]]]}],"returns":[[["AkairoModule"]]],"meta":{"line":167,"file":"AkairoHandler.js","path":"src/struct"}},{"name":"removeAll","description":"Removes all modules.","inherits":"AkairoHandler#removeAll","inherited":true,"returns":[[["AkairoHandler"]]],"meta":{"line":181,"file":"AkairoHandler.js","path":"src/struct"}},{"name":"reload","description":"Reloads a module.","inherits":"AkairoHandler#reload","inherited":true,"params":[{"name":"id","description":"ID of the module.","type":[[["string"]]]}],"returns":[[["AkairoModule"]]],"meta":{"line":194,"file":"AkairoHandler.js","path":"src/struct"}},{"name":"reloadAll","description":"Reloads all modules.","inherits":"AkairoHandler#reloadAll","inherited":true,"returns":[[["AkairoHandler"]]],"meta":{"line":210,"file":"AkairoHandler.js","path":"src/struct"}},{"name":"findCategory","description":"Finds a category by name.","inherits":"AkairoHandler#findCategory","inherited":true,"params":[{"name":"name","description":"Name to find with.","type":[[["string"]]]}],"returns":[[["Category"]]],"meta":{"line":223,"file":"AkairoHandler.js","path":"src/struct"}}],"events":[{"name":"load","description":"Emitted when a listener is loaded.","params":[{"name":"listener","description":"Listener loaded.","type":[[["Listener"]]]},{"name":"isReload","description":"Whether or not this was a reload.","type":[[["boolean"]]]}],"meta":{"line":180,"file":"ListenerHandler.js","path":"src/struct/listeners"}},{"name":"remove","description":"Emitted when a listener is removed.","params":[{"name":"listener","description":"Listener removed.","type":[[["Listener"]]]}],"meta":{"line":187,"file":"ListenerHandler.js","path":"src/struct/listeners"}}],"meta":{"line":8,"file":"ListenerHandler.js","path":"src/struct/listeners"}},{"name":"AkairoError","extends":["Error"],"construct":{"name":"AkairoError","description":"Creates an error for Akairo","params":[{"name":"key","description":"Error key.","type":[[["string"]]]},{"name":"args","description":"Arguments.","variable":true,"type":[[["any"]]]}]},"meta":{"line":23,"file":"AkairoError.js","path":"src/util"}},{"name":"Category","extends":["Collection"],"construct":{"name":"Category","description":"A group of modules.","params":[{"name":"id","description":"ID of the category.","type":[[["string"]]]},{"name":"iterable","description":"Entries to set.","optional":true,"type":[[["Iterable"]]]}]},"props":[{"name":"id","description":"ID of the category.","type":[[["string"]]],"meta":{"line":17,"file":"Category.js","path":"src/util"}}],"methods":[{"name":"reloadAll","description":"Calls `reload()` on all items in this category.","returns":[[["Category"]]],"meta":{"line":24,"file":"Category.js","path":"src/util"}},{"name":"removeAll","description":"Calls `remove()` on all items in this category.","returns":[[["Category"]]],"meta":{"line":36,"file":"Category.js","path":"src/util"}},{"name":"toString","description":"Returns the ID.","returns":[[["string"]]],"meta":{"line":48,"file":"Category.js","path":"src/util"}}],"meta":{"line":4,"file":"Category.js","path":"src/util"}}],"interfaces":[],"typedefs":[{"name":"ProviderOptions","description":"Options to use for providers.","type":[[["Object"]]],"props":[{"name":"idColumn","description":"Column for the unique key, defaults to 'id'.","optional":true,"default":"'id'","type":[[["string"]]]},{"name":"dataColumn","description":"Column for JSON data.\nIf not provided, the provider will use all columns of the table.\nIf provided, only one column will be used, but it will be more flexible due to being parsed as JSON.\nFor Sequelize, note that the model has to specify the type of the column as JSON or JSONB.","optional":true,"type":[[["string"]]]}],"meta":{"line":74,"file":"Provider.js","path":"src/providers"}},{"name":"AkairoOptions","description":"Options for the client.","type":[[["Object"]]],"props":[{"name":"ownerID","description":"Discord ID of the client owner(s).","optional":true,"default":"''","type":[[["Snowflake"]],[["Array","<"],["Snowflake",">"]]]}],"meta":{"line":45,"file":"AkairoClient.js","path":"src/struct"}},{"name":"AkairoHandlerOptions","description":"Options for module loading and handling.","type":[[["Object"]]],"props":[{"name":"directory","description":"Directory to modules.","optional":true,"type":[[["string"]]]},{"name":"classToHandle","description":"Only classes that extends this class can be handled.","optional":true,"default":"AkairoModule","type":[[["function"]]]},{"name":"extensions","description":"File extensions to load.\nBy default this is .js, .json, and .ts files.","optional":true,"type":[[["Array","<"],["string",">"]],[["Set","<"],["string",">"]]]},{"name":"automateCategories","description":"Whether or not to set each module's category to its parent directory name.","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"loadFilter","description":"Filter for files to be loaded.\nCan be set individually for each handler by overriding the `loadAll` method.","optional":true,"type":[[["LoadPredicate"]]]}],"meta":{"line":270,"file":"AkairoHandler.js","path":"src/struct"}},{"name":"LoadPredicate","description":"Function for filtering files when loading.\nTrue means the file should be loaded.","type":[[["function"]]],"params":[{"name":"filepath","description":"Filepath of file.","type":[[["String"]]]}],"returns":[[["boolean"]]],"meta":{"line":282,"file":"AkairoHandler.js","path":"src/struct"}},{"name":"AkairoModuleOptions","description":"Options for module.","type":[[["Object"]]],"props":[{"name":"category","description":"Category ID for organization purposes.","optional":true,"default":"'default'","type":[[["string"]]]}],"meta":{"line":72,"file":"AkairoModule.js","path":"src/struct"}},{"name":"ArgumentOptions","description":"Options for how an argument parses text.","type":[[["Object"]]],"props":[{"name":"id","description":"ID of the argument for use in the args object.\nThis does nothing inside an ArgumentGenerator.","type":[[["string"]]]},{"name":"match","description":"Method to match text.","optional":true,"default":"'phrase'","type":[[["ArgumentMatch"]]]},{"name":"type","description":"Type to cast to.","optional":true,"default":"'string'","type":[[["ArgumentType"]],[["ArgumentTypeCaster"]]]},{"name":"flag","description":"The string(s) to use as the flag for flag or option match.","optional":true,"type":[[["string"]],[["Array","<"],["string",">"]]]},{"name":"multipleFlags","description":"Whether or not to have flags process multiple inputs.\nFor option flags, this works like the separate match; the limit option will also work here.\nFor flags, this will count the number of occurrences.","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"index","description":"Index of phrase to start from.\nApplicable to phrase, text, content, rest, or separate match only.\nIgnored when used with the unordered option.","optional":true,"type":[[["number"]]]},{"name":"unordered","description":"Marks the argument as unordered.\nEach phrase is evaluated in order until one matches (no input at all means no evaluation).\nPassing in a number forces evaluation from that index onwards.\nPassing in an array of numbers forces evaluation on those indices only.\nIf there is a match, that index is considered used and future unordered args will not check that index again.\nIf there is no match, then the prompting or default value is used.\nApplicable to phrase match only.","optional":true,"default":false,"type":[[["boolean"]],[["number"]],[["Array","<"],["number",">"]]]},{"name":"limit","description":"Amount of phrases to match when matching more than one.\nApplicable to text, content, rest, or separate match only.","optional":true,"default":"Infinity","type":[[["number"]]]},{"name":"default","description":"Default value if no input or did not cast correctly.\nIf using a flag match, setting the default value to a non-void value inverses the result.","optional":true,"default":null,"type":[[["DefaultValueSupplier"]],[["any"]]]},{"name":"otherwise","description":"Text sent if argument parsing fails.\nThis overrides the `default` option and all prompt options.","optional":true,"type":[[["StringResolvable"]],[["MessageOptions"]],[["MessageAdditions"]],[["OtherwiseContentSupplier"]]]},{"name":"prompt","description":"Prompt options for when user does not provide input.","optional":true,"type":[[["ArgumentPromptOptions"]]]}],"meta":{"line":480,"file":"Argument.js","path":"src/struct/commands/arguments"}},{"name":"ArgumentPromptData","description":"Data passed to argument prompt functions.","type":[[["Object"]]],"props":[{"name":"retries","description":"Amount of retries so far.","type":[[["number"]]]},{"name":"infinite","description":"Whether the prompt is infinite or not.","type":[[["boolean"]]]},{"name":"message","description":"The message that caused the prompt.","type":[[["Message"]]]},{"name":"phrase","description":"The input phrase that caused the prompt if there was one, otherwise an empty string.","type":[[["string"]]]}],"params":[{"name":"failure","description":"The value that failed if there was one, otherwise null.","type":[[["void"]],[["Flag"]]]}],"meta":{"line":510,"file":"Argument.js","path":"src/struct/commands/arguments"}},{"name":"ArgumentPromptOptions","description":"A prompt to run if the user did not input the argument correctly.\nCan only be used if there is not a default value (unless optional is true).","type":[[["Object"]]],"props":[{"name":"retries","description":"Amount of retries allowed.","optional":true,"default":1,"type":[[["number"]]]},{"name":"time","description":"Time to wait for input.","optional":true,"default":30000,"type":[[["number"]]]},{"name":"cancelWord","description":"Word to use for cancelling the command.","optional":true,"default":"'cancel'","type":[[["string"]]]},{"name":"stopWord","description":"Word to use for ending infinite prompts.","optional":true,"default":"'stop'","type":[[["string"]]]},{"name":"optional","description":"Prompts only when argument is provided but was not of the right type.","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"infinite","description":"Prompts forever until the stop word, cancel word, time limit, or retry limit.\nNote that the retry count resets back to one on each valid entry.\nThe final evaluated argument will be an array of the inputs.","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"limit","description":"Amount of inputs allowed for an infinite prompt before finishing.","optional":true,"default":"Infinity","type":[[["number"]]]},{"name":"breakout","description":"Whenever an input matches the format of a command, this option controls whether or not to cancel this command and run that command.\nThe command to be run may be the same command or some other command.","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"start","description":"Text sent on start of prompt.","optional":true,"type":[[["StringResolvable"]],[["MessageOptions"]],[["MessageAdditions"]],[["PromptContentSupplier"]]]},{"name":"retry","description":"Text sent on a retry (failure to cast type).","optional":true,"type":[[["StringResolvable"]],[["MessageOptions"]],[["MessageAdditions"]],[["PromptContentSupplier"]]]},{"name":"timeout","description":"Text sent on collector time out.","optional":true,"type":[[["StringResolvable"]],[["MessageOptions"]],[["MessageAdditions"]],[["PromptContentSupplier"]]]},{"name":"ended","description":"Text sent on amount of tries reaching the max.","optional":true,"type":[[["StringResolvable"]],[["MessageOptions"]],[["MessageAdditions"]],[["PromptContentSupplier"]]]},{"name":"cancel","description":"Text sent on cancellation of command.","optional":true,"type":[[["StringResolvable"]],[["MessageOptions"]],[["MessageAdditions"]],[["PromptContentSupplier"]]]},{"name":"modifyStart","description":"Function to modify start prompts.","optional":true,"type":[[["PromptContentModifier"]]]},{"name":"modifyRetry","description":"Function to modify retry prompts.","optional":true,"type":[[["PromptContentModifier"]]]},{"name":"modifyTimeout","description":"Function to modify timeout messages.","optional":true,"type":[[["PromptContentModifier"]]]},{"name":"modifyEnded","description":"Function to modify out of tries messages.","optional":true,"type":[[["PromptContentModifier"]]]},{"name":"modifyCancel","description":"Function to modify cancel messages.","optional":true,"type":[[["PromptContentModifier"]]]}],"meta":{"line":520,"file":"Argument.js","path":"src/struct/commands/arguments"}},{"name":"ArgumentMatch","description":"The method to match arguments from text.\n- `phrase` matches by the order of the phrases inputted.\nIt ignores phrases that matches a flag.\n- `flag` matches phrases that are the same as its flag.\nThe evaluated argument is either true or false.\n- `option` matches phrases that starts with the flag.\nThe phrase after the flag is the evaluated argument.\n- `rest` matches the rest of the phrases.\nIt ignores phrases that matches a flag.\nIt preserves the original whitespace between phrases and the quotes around phrases.\n- `separate` matches the rest of the phrases and processes each individually.\nIt ignores phrases that matches a flag.\n- `text` matches the entire text, except for the command.\nIt ignores phrases that matches a flag.\nIt preserves the original whitespace between phrases and the quotes around phrases.\n- `content` matches the entire text as it was inputted, except for the command.\nIt preserves the original whitespace between phrases and the quotes around phrases.\n- `restContent` matches the rest of the text as it was inputted.\nIt preserves the original whitespace between phrases and the quotes around phrases.\n- `none` matches nothing at all and an empty string will be used for type operations.","type":[[["string"]]],"meta":{"line":547,"file":"Argument.js","path":"src/struct/commands/arguments"}},{"name":"ArgumentType","description":"The type that the argument should be cast to.\n- `string` does not cast to any type.\n- `lowercase` makes the input lowercase.\n- `uppercase` makes the input uppercase.\n- `charCodes` transforms the input to an array of char codes.\n- `number` casts to a number.\n- `integer` casts to an integer.\n- `bigint` casts to a big integer.\n- `url` casts to an `URL` object.\n- `date` casts to a `Date` object.\n- `color` casts a hex code to an integer.\n- `commandAlias` tries to resolve to a command from an alias.\n- `command` matches the ID of a command.\n- `inhibitor` matches the ID of an inhibitor.\n- `listener` matches the ID of a listener.\n\nPossible Discord-related types.\nThese types can be plural (add an 's' to the end) and a collection of matching objects will be used.\n- `user` tries to resolve to a user.\n- `member` tries to resolve to a member.\n- `relevant` tries to resolve to a relevant user, works in both guilds and DMs.\n- `channel` tries to resolve to a channel.\n- `textChannel` tries to resolve to a text channel.\n- `voiceChannel` tries to resolve to a voice channel.\n- `role` tries to resolve to a role.\n- `emoji` tries to resolve to a custom emoji.\n- `guild` tries to resolve to a guild.\n\nOther Discord-related types:\n- `message` tries to fetch a message from an ID within the channel.\n- `guildMessage` tries to fetch a message from an ID within the guild.\n- `relevantMessage` is a combination of the above, works in both guilds and DMs.\n- `invite` tries to fetch an invite object from a link.\n- `userMention` matches a mention of a user.\n- `memberMention` matches a mention of a guild member.\n- `channelMention` matches a mention of a channel.\n- `roleMention` matches a mention of a role.\n- `emojiMention` matches a mention of an emoji.\n\nAn array of strings can be used to restrict input to only those strings, case insensitive.\nThe array can also contain an inner array of strings, for aliases.\nIf so, the first entry of the array will be used as the final argument.\n\nA regular expression can also be used.\nThe evaluated argument will be an object containing the `match` and `matches` if global.","type":[[["string"]],[["Array","<"],["string",">"]]],"meta":{"line":571,"file":"Argument.js","path":"src/struct/commands/arguments"}},{"name":"ArgumentTypeCaster","description":"A function for processing user input to use as an argument.\nA void return value will use the default value for the argument or start a prompt.\nAny other truthy return value will be used as the evaluated argument.\nIf returning a Promise, the resolved value will go through the above steps.","type":[[["function"]]],"params":[{"name":"message","description":"Message that triggered the command.","type":[[["Message"]]]},{"name":"phrase","description":"The user input.","type":[[["string"]]]}],"returns":[[["any"]]],"meta":{"line":620,"file":"Argument.js","path":"src/struct/commands/arguments"}},{"name":"FailureData","description":"Data passed to functions that run when things failed.","type":[[["Object"]]],"props":[{"name":"phrase","description":"The input phrase that failed if there was one, otherwise an empty string.","type":[[["string"]]]}],"params":[{"name":"failure","description":"The value that failed if there was one, otherwise null.","type":[[["void"]],[["Flag"]]]}],"meta":{"line":631,"file":"Argument.js","path":"src/struct/commands/arguments"}},{"name":"DefaultValueSupplier","description":"Function get the default value of the argument.","type":[[["function"]]],"params":[{"name":"message","description":"Message that triggered the command.","type":[[["Message"]]]},{"name":"data","description":"Miscellaneous data.","type":[[["FailureData"]]]}],"returns":[[["any"]]],"meta":{"line":638,"file":"Argument.js","path":"src/struct/commands/arguments"}},{"name":"ParsedValuePredicate","description":"A function for validating parsed arguments.","type":[[["function"]]],"params":[{"name":"message","description":"Message that triggered the command.","type":[[["Message"]]]},{"name":"phrase","description":"The user input.","type":[[["string"]]]},{"name":"value","description":"The parsed value.","type":[[["any"]]]}],"returns":[[["boolean"]]],"meta":{"line":646,"file":"Argument.js","path":"src/struct/commands/arguments"}},{"name":"OtherwiseContentSupplier","description":"A function returning the content if argument parsing fails.","type":[[["function"]]],"params":[{"name":"message","description":"Message that triggered the command.","type":[[["Message"]]]},{"name":"data","description":"Miscellaneous data.","type":[[["FailureData"]]]}],"returns":[[["StringResolvable"]],[["MessageOptions"]],[["MessageAdditions"]],[["Promise","<("],["StringResolvable","|"],["MessageOptions","|"],["MessageAdditions",")>"]]],"meta":{"line":655,"file":"Argument.js","path":"src/struct/commands/arguments"}},{"name":"PromptContentModifier","description":"A function modifying a prompt text.","type":[[["function"]]],"params":[{"name":"text","description":"Text from the prompt to modify.","type":[[["string"]],[["MessageEmbed"]],[["MessageAttachment"]],[["Array","<"],["MessageAttachment",">"]],[["MessageOptions"]]]},{"name":"message","description":"Message that triggered the command.","type":[[["Message"]]]},{"name":"data","description":"Miscellaneous data.","type":[[["ArgumentPromptData"]]]}],"returns":[[["StringResolvable"]],[["MessageOptions"]],[["MessageAdditions"]],[["Promise","<("],["StringResolvable","|"],["MessageOptions","|"],["MessageAdditions",")>"]]],"meta":{"line":663,"file":"Argument.js","path":"src/struct/commands/arguments"}},{"name":"PromptContentSupplier","description":"A function returning text for the prompt.","type":[[["function"]]],"params":[{"name":"message","description":"Message that triggered the command.","type":[[["Message"]]]},{"name":"data","description":"Miscellaneous data.","type":[[["ArgumentPromptData"]]]}],"returns":[[["StringResolvable"]],[["MessageOptions"]],[["MessageAdditions"]],[["Promise","<("],["StringResolvable","|"],["MessageOptions","|"],["MessageAdditions",")>"]]],"meta":{"line":672,"file":"Argument.js","path":"src/struct/commands/arguments"}},{"name":"CommandOptions","description":"Options to use for command execution behavior.\nAlso includes properties from AkairoModuleOptions.","type":[[["AkairoModuleOptions"]]],"props":[{"name":"aliases","description":"Command names.","optional":true,"default":"[]","type":[[["Array","<"],["string",">"]]]},{"name":"args","description":"Argument options or generator.","optional":true,"default":"[]","type":[[["Array","<"],["ArgumentOptions",">"]],[["ArgumentGenerator"]]]},{"name":"quoted","description":"Whether or not to consider quotes.","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"separator","description":"Custom separator for argument input.","optional":true,"type":[[["string"]]]},{"name":"flags","description":"Flags to use when using an ArgumentGenerator.","optional":true,"default":"[]","type":[[["Array","<"],["string",">"]]]},{"name":"optionFlags","description":"Option flags to use when using an ArgumentGenerator.","optional":true,"default":"[]","type":[[["Array","<"],["string",">"]]]},{"name":"channel","description":"Restricts channel to either 'guild' or 'dm'.","optional":true,"type":[[["string"]]]},{"name":"ownerOnly","description":"Whether or not to allow client owner(s) only.","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"typing","description":"Whether or not to type in channel during execution.","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"editable","description":"Whether or not message edits will run this command.","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"cooldown","description":"The command cooldown in milliseconds.","optional":true,"type":[[["number"]]]},{"name":"ratelimit","description":"Amount of command uses allowed until cooldown.","optional":true,"default":1,"type":[[["number"]]]},{"name":"prefix","description":"The prefix(es) to overwrite the global one for this command.","optional":true,"type":[[["string"]],[["Array","<"],["string",">"]],[["PrefixSupplier"]]]},{"name":"userPermissions","description":"Permissions required by the user to run this command.","optional":true,"type":[[["PermissionResolvable"]],[["Array","<"],["PermissionResolvable",">"]],[["MissingPermissionSupplier"]]]},{"name":"clientPermissions","description":"Permissions required by the client to run this command.","optional":true,"type":[[["PermissionResolvable"]],[["Array","<"],["PermissionResolvable",">"]],[["MissingPermissionSupplier"]]]},{"name":"regex","description":"A regex to match in messages that are not directly commands.\nThe args object will have `match` and `matches` properties.","optional":true,"type":[[["RegExp"]],[["RegexSupplier"]]]},{"name":"condition","description":"Whether or not to run on messages that are not directly commands.","optional":true,"type":[[["ExecutionPredicate"]]]},{"name":"before","description":"Function to run before argument parsing and execution.","optional":true,"type":[[["BeforeAction"]]]},{"name":"lock","description":"The key type or key generator for the locker. If lock is a string, it's expected one of 'guild', 'channel', or 'user'.","optional":true,"type":[[["KeySupplier"]],[["string"]]]},{"name":"ignoreCooldown","description":"ID of user(s) to ignore cooldown or a function to ignore.","optional":true,"type":[[["Snowflake"]],[["Array","<"],["Snowflake",">"]],[["IgnoreCheckPredicate"]]]},{"name":"ignorePermissions","description":"ID of user(s) to ignore `userPermissions` checks or a function to ignore.","optional":true,"type":[[["Snowflake"]],[["Array","<"],["Snowflake",">"]],[["IgnoreCheckPredicate"]]]},{"name":"defaultPrompt","description":"The default prompt options.","optional":true,"default":"{}","type":[[["ArgumentPromptOptions"]]]},{"name":"description","description":"Description of the command.","optional":true,"default":"''","type":[[["StringResolvable"]]]}],"meta":{"line":239,"file":"Command.js","path":"src/struct/commands"}},{"name":"BeforeAction","description":"A function to run before argument parsing and execution.","type":[[["function"]]],"params":[{"name":"message","description":"Message that triggered the command.","type":[[["Message"]]]}],"returns":[[["any"]]],"meta":{"line":269,"file":"Command.js","path":"src/struct/commands"}},{"name":"KeySupplier","description":"A function used to supply the key for the locker.","type":[[["function"]]],"params":[{"name":"message","description":"Message that triggered the command.","type":[[["Message"]]]},{"name":"args","description":"Evaluated arguments.","type":[[["Object"]]]}],"returns":[[["string"]]],"meta":{"line":276,"file":"Command.js","path":"src/struct/commands"}},{"name":"ExecutionPredicate","description":"A function used to check if the command should run arbitrarily.","type":[[["function"]]],"params":[{"name":"message","description":"Message to check.","type":[[["Message"]]]}],"returns":[[["boolean"]]],"meta":{"line":284,"file":"Command.js","path":"src/struct/commands"}},{"name":"MissingPermissionSupplier","description":"A function used to check if a message has permissions for the command.\nA non-null return value signifies the reason for missing permissions.","type":[[["function"]]],"params":[{"name":"message","description":"Message that triggered the command.","type":[[["Message"]]]}],"returns":[[["any"]]],"meta":{"line":291,"file":"Command.js","path":"src/struct/commands"}},{"name":"RegexSupplier","description":"A function used to return a regular expression.","type":[[["function"]]],"params":[{"name":"message","description":"Message to get regex for.","type":[[["Message"]]]}],"returns":[[["RegExp"]]],"meta":{"line":299,"file":"Command.js","path":"src/struct/commands"}},{"name":"ArgumentGenerator","description":"Generator for arguments.\nWhen yielding argument options, that argument is ran and the result of the processing is given.\nThe last value when the generator is done is the resulting `args` for the command's `exec`.","type":[[["GeneratorFunction"]]],"params":[{"name":"message","description":"Message that triggered the command.","type":[[["Message"]]]},{"name":"parsed","description":"Parsed content.","type":[[["object"]]]},{"name":"state","description":"Argument processing state.","type":[[["object"]]]}],"returns":[[["IterableIterator","<("],["ArgumentOptions","|"],["Flag","|"],["any",")>"]]],"meta":{"line":306,"file":"Command.js","path":"src/struct/commands"}},{"name":"CommandHandlerOptions","description":"Also includes properties from AkairoHandlerOptions.","type":[[["AkairoHandlerOptions"]]],"props":[{"name":"blockClient","description":"Whether or not to block self.","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"blockBots","description":"Whether or not to block bots.","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"prefix","description":"Default command prefix(es).","optional":true,"default":"'!'","type":[[["string"]],[["Array","<"],["string",">"]],[["PrefixSupplier"]]]},{"name":"allowMention","description":"Whether or not to allow mentions to the client user as a prefix.","optional":true,"default":true,"type":[[["boolean"]],[["MentionPrefixPredicate"]]]},{"name":"aliasReplacement","description":"Regular expression to automatically make command aliases.\nFor example, using `/-/g` would mean that aliases containing `-` would be valid with and without it.\nSo, the alias `command-name` is valid as both `command-name` and `commandname`.","optional":true,"type":[[["RegExp"]]]},{"name":"handleEdits","description":"Whether or not to handle edited messages using CommandUtil.","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"storeMessages","description":"Whether or not to have CommandUtil store all prompts and their replies.","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"commandUtil","description":"Whether or not to assign `message.util`.","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"commandUtilLifetime","description":"Milliseconds a message should exist for before its command util instance is marked for removal.\nIf 0, CommandUtil instances will never be removed and will cause memory to increase indefinitely.","optional":true,"default":"3e5","type":[[["number"]]]},{"name":"commandUtilSweepInterval","description":"Time interval in milliseconds for sweeping command util instances.\nIf 0, CommandUtil instances will never be removed and will cause memory to increase indefinitely.","optional":true,"default":"3e5","type":[[["number"]]]},{"name":"fetchMembers","description":"Whether or not to fetch member on each message from a guild.","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"defaultCooldown","description":"The default cooldown for commands.","optional":true,"default":0,"type":[[["number"]]]},{"name":"ignoreCooldown","description":"ID of user(s) to ignore cooldown or a function to ignore.\nDefaults to the client owner(s).","optional":true,"type":[[["Snowflake"]],[["Array","<"],["Snowflake",">"]],[["IgnoreCheckPredicate"]]]},{"name":"ignorePermissions","description":"ID of user(s) to ignore `userPermissions` checks or a function to ignore.","optional":true,"default":"[]","type":[[["Snowflake"]],[["Array","<"],["Snowflake",">"]],[["IgnoreCheckPredicate"]]]},{"name":"defaultPrompt","description":"The default prompt options.","optional":true,"type":[[["ArgumentPromptOptions"]]]}],"meta":{"line":1116,"file":"CommandHandler.js","path":"src/struct/commands"}},{"name":"IgnoreCheckPredicate","description":"A function that returns whether this message should be ignored for a certain check.","type":[[["function"]]],"params":[{"name":"message","description":"Message to check.","type":[[["Message"]]]},{"name":"command","description":"Command to check.","type":[[["Command"]]]}],"returns":[[["boolean"]]],"meta":{"line":1141,"file":"CommandHandler.js","path":"src/struct/commands"}},{"name":"MentionPrefixPredicate","description":"A function that returns whether mentions can be used as a prefix.","type":[[["function"]]],"params":[{"name":"message","description":"Message to option for.","type":[[["Message"]]]}],"returns":[[["boolean"]]],"meta":{"line":1149,"file":"CommandHandler.js","path":"src/struct/commands"}},{"name":"PrefixSupplier","description":"A function that returns the prefix(es) to use.","type":[[["function"]]],"params":[{"name":"message","description":"Message to get prefix for.","type":[[["Message"]]]}],"returns":[[["string"]],[["Array","<"],["string",">"]]],"meta":{"line":1156,"file":"CommandHandler.js","path":"src/struct/commands"}},{"name":"MessageExtensions","description":"Extra properties applied to the Discord.js message object.","type":[[["Object"]]],"props":[{"name":"util","description":"Utilities for command responding.\nAvailable on all messages after 'all' inhibitors and built-in inhibitors (bot, client).\nNot all properties of the util are available, depending on the input.","nullable":true,"type":[[["CommandUtil"]]]}],"meta":{"line":166,"file":"CommandUtil.js","path":"src/struct/commands"}},{"name":"ParsedComponentData","description":"Various parsed components of the message.","type":[[["Object"]]],"props":[{"name":"command","description":"The command used.","nullable":true,"type":[[["Command"]]]},{"name":"prefix","description":"The prefix used.","nullable":true,"type":[[["string"]]]},{"name":"alias","description":"The alias used.","nullable":true,"type":[[["string"]]]},{"name":"content","description":"The content to the right of the alias.","nullable":true,"type":[[["string"]]]},{"name":"afterPrefix","description":"The content to the right of the prefix.","nullable":true,"type":[[["string"]]]}],"meta":{"line":174,"file":"CommandUtil.js","path":"src/struct/commands"}},{"name":"InhibitorOptions","description":"Options to use for inhibitor execution behavior.\nAlso includes properties from AkairoModuleOptions.","type":[[["AkairoModuleOptions"]]],"props":[{"name":"reason","description":"Reason emitted when command or message is blocked.","optional":true,"default":"''","type":[[["string"]]]},{"name":"type","description":"Can be 'all' to run on all messages, 'pre' to run on messages not blocked by the built-in inhibitors, or 'post' to run on messages that are commands.","optional":true,"default":"'post'","type":[[["boolean"]]]},{"name":"priority","description":"Priority for the inhibitor for when more than one inhibitors block a message.\nThe inhibitor with the highest priority is the one that is used for the block reason.","optional":true,"default":0,"type":[[["number"]]]}],"meta":{"line":80,"file":"Inhibitor.js","path":"src/struct/inhibitors"}},{"name":"ListenerOptions","description":"Options to use for listener execution behavior.\nAlso includes properties from AkairoModuleOptions.","type":[[["AkairoModuleOptions"]]],"props":[{"name":"emitter","description":"The event emitter, either a key from `ListenerHandler#emitters` or an EventEmitter.","type":[[["string"]],[["EventEmitter"]]]},{"name":"event","description":"Event name to listen to.","type":[[["string"]]]},{"name":"type","description":"Type of listener, either 'on' or 'once'.","optional":true,"default":"'on'","type":[[["string"]]]}],"meta":{"line":77,"file":"Listener.js","path":"src/struct/listeners"}}],"externals":[]}